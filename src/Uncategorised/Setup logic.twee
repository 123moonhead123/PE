:: Setup logic [pos_134_224]
\
<<set $misc={
	hypno: {
		images: [
			{
				filename: "hypno_1_1.gif",
				chance: 10,
				kinkActive: function() {
					return true;
				}
			},
			{
				filename: "hypno_1_2.gif",
				chance: 10,
				kinkActive: function() {
					return true;
				}
			},
			{
				filename: "hypno_1_3.gif",
				chance: 10,
				kinkActive: function() {
					return true;
				}
			},
			{
				filename: "hypno_1_4.gif",
				chance: 10,
				kinkActive: function() {
					return true;
				}
			},
			{
				filename: "hypno_1_5.gif",
				chance: 10,
				kinkActive: function() {
					return true;
				}
			},
			{
				filename: "hypno_1_6.gif",
				chance: 10,
				kinkActive: function() {
					return true;
				}
			},
			{
				filename: "hypno_1_7.gif",
				chance: 10,
				kinkActive: function() {
					return true;
				}
			},
			{
				filename: "hypno_cum.gif",
				chance: 10,
				kinkActive: function() {
					return $kink.cumEating;
				}
			},
			{
				filename: "hypno_piss.gif",
				chance: 10,
				kinkActive:  function() {
					return $kink.watersports;
				}
			},
			{
				filename: "hypno_sph.gif",
				chance: 10,
				kinkActive: function() {
					return $kink.sph;
				}
			},
			{
				filename: "hypno_maso.gif",
				chance: 10,
				kinkActive: function() {
					return $kink.painPlay;
				}
			},
		],
		getRandomImage: function() {
			var ha=[];
			var tc=0;
			for (var i=0; i lt this.images.length; i++) {
				if (this.images[i].kinkActive()) {
					ha.push(this.images[i]);
					tc+=this.images[i].chance;
				}
			}
			tc=$random.getIntInclusive(1, tc);
			for (var i=0; i lt ha.length; i++) {
				tc-=ha[i].chance;
				if (tc lte 0) {
					return ha[i].filename;
				}
			}
		}
	},
	daringUnderwearNone: 6,
	daringUnderwearFemale: 3,
	daringClothesFemale: 5,
	daringCollar: 5,
	daringCollarSlutty: 8,
	daringHairband: 5,
	daringExtra: 5,
	choresPercentCalc: function() {
		var ca=0;
		var cd=0;
		for (var i=0; i lt $chores.length; i++) {
			if ($chores[i].active && ($chores[i].daringRequired lte $player.daring) && ($chores[i].perversionRequired lte $player.perversion.guardian) && ($chores[i].perversionMax gte $player.perversion.guardian)) {
				ca++;
				if ($chores[i].dayPerformed + $chores[i].daysWait gte $time.day) {
					cd++;
				}
			}
		}
		if (ca lte 0) { ca=1; }
		ca=Math.floor(100*cd/ca);
		return ca;
	},
	choresRequired: function() {
		for (var i=0; i lt $chores.length; i++) {
			if ($chores[i].active && $chores[i].required && ($chores[i].daringRequired lte $player.daring) && ($chores[i].perversionRequired lte $player.perversion.guardian) && ($chores[i].perversionMax gte $player.perversion.guardian)) {
				return true;
			}
		}
		return false;
	},
	choresAvailable: function() {
		var ca=0;
		for (var i=0; i lt $chores.length; i++) {
			if ($chores[i].active && ($chores[i].daringRequired lte $player.daring) && ($chores[i].perversionRequired lte $player.perversion.guardian) && ($chores[i].perversionMax gte $player.perversion.guardian)) {
				if ($chores[i].dayPerformed + $chores[i].daysWait lte $time.day) {
					ca++;
				}
			}
		}
		return ca;
	},
	choresFails: function() {
		var cf=0;
		for (var i=0; i lt $chores.length; i++) {
			if ($chores[i].active && $chores[i].fail && ($chores[i].daringRequired lte $player.daring) && ($chores[i].perversionRequired lte $player.perversion.guardian) && ($chores[i].perversionMax gte $player.perversion.guardian)) {
				cf++;
			}
		}
		return cf;
	},
	canPerformChores: function() {
		var maxHour=21;
		var w=$time.isWeekend() && ($time.hour gte 8) && ($time.hour lt maxHour);
		var d=($time.hour gte 15) && ($time.hour lt maxHour);
		var r=$misc.choresRequired() && (($time.hour gte maxHour) || ($time.hour lt 6));
		return w || d || r;
	},
	canSleep: function() {
		return ($time.hour lt 5) || ($time.hour gte 15);
	},
	canNap: function() {
		return ($time.hour gte 5) && ($time.hour lte 21);
	},
	toggleKink: function(kink) {
		if (kink) {return "checked"}
		return "unchecked"
	},
	resetGuardian: function() {
		if ($kink.incest) {
			$guardian="your mother";
			$Guardian="Your mother";
			$myguardian="my mother";
			$Myguardian="My mother";
		}
		if (not $kink.incest) {
			$guardian=$babysitter;
			$Guardian=$babysitter;
			$myguardian=$babysitter;
			$Myguardian=$babysitter;
		}
	},
	itemIsUnique: function(itemName) {
		var count=0;
		var type=0;
		for (var i=0; i lt $itemSubTypes.length; i++) {
			for (var j=0; j lt $itemSubTypes[i].length; j++) {
				if (itemName eq $itemSubTypes[i][j]) {
					count=1;
					type=i;
				}
			}
			if (count==1) {
			}
		}
		if (count eq 1) {
			count=0;
			for (var j=0; j lt $itemSubTypes[type].length; j++) {
				if ($inventory.indexOf($itemSubTypes[type][j]) gte 0) {
					count++;
				}
			}
		}
		return count;
	},
	removeOldPermanents: function() {
		for (var i=0; i lt Object.keys($items).length; i++) {
			var o=$items[Object.keys($items)[i]];
			if ($player.owns(o)) {
				if (o.name eq $items.PermanentNormalMakeup.name) {
					$inventory.splice($inventory.indexOf(o.name), 1);
					$inventory.push($items.NormalMakeup.name);
				}
				if (o.name eq $items.PermanentBimboMakeup.name) {
					$inventory.splice($inventory.indexOf(o.name), 1);
					$inventory.push($items.BimboMakeup.name);
				}
				if (o.name eq $items.PermanentHeavyMakeup.name) {
					$inventory.splice($inventory.indexOf(o.name), 1);
					$inventory.push($items.HeavyMakeup.name);
				}
				if (o.name eq $items.LipsPermanent.name || o.name eq $items.AssPermanent.name || o.name eq $items.breastPermanent.name) {
					$inventory.splice($inventory.indexOf(o.name), 1);
				}
			}
		}
	},
	isMallOpen: function() {
		return ($time.hour gte 8) && ($time.hour lte 18) && (($time.day % 7 neq $player.bribeDay) || ($time.hour gte 15));
	},
	isArcadeOpen: function() {
		return ($time.hour gte 10) && ($time.hour lt 17);
	},
	haveSchool: function() {
		return !$time.isWeekend() && ($time.hour gte 7) && ($time.hour lt 12);
	},
	schoolRequired: function() {
		if (($time.day % 7 eq $player.bribeDay) && ($time.hour lt 15)) {
			return true;
		}
		return false;
	},
	schoolMessage: function() {
		if ($time.hour gte 20) {
			return "It's night time.";
		} else if (!$time.isWeekend()) {
     		if ($time.hour lt 9) {
				return "You have school today.";
			} else if ($time.hour lt 12) {
				return "You're running late for school.";
			} else if ($time.hour lt 15) {
				return "It's too late to bother about school today.";
			} else {
				return "School is over for the day.";
			}
		} else {
			return "It's the weekend, so no school today.";
		}
	},
	needTherapy: function() {
		var b=($time.weekDay() eq $player.bribeDay) && ($time.hour gte 15);
		var d=($time.weekDay() neq $player.bribeDay) && ($time.hour gte 8);
		return $player.therapistMode && ($player.therapistDays.indexOf($time.day % 7) gte 0) && ($player.therapistLastDay lt $time.day) && (b || d) && ($time.hour lt 21);
	},
	setCage: function() {
		if ([1].includes($kink.penisShrinkProgress)) {
			var c=0;
			$chastityNames=["CB-6000 chastity device", "CB-6000S chastity device"]
			for (var i=$inventory.length; i gte 0; i--) {
				if ($chastityNames.includes($inventory[i])) {
					$inventory.splice(i, 1);
					c=1;
					break;
				}
			}
			for (var i=$player.clothes.length; i gte 0; i--) {
				if ($chastityNames.includes($player.clothes[i])) {
					$player.clothes.splice(i, 1);
					c=2;
					break;
				}
			}
			$items.chastityDevice.name="CB-6000S chastity device";
			$items.chastityDevice.image="chastity_cb6000s.jpg";
			if (c gte 1) {	$inventory.push($items.chastityDevice.name);	}
			if (c gte 2) {	$player.clothes.push($items.chastityDevice.name);	}
		}
	},
	postponeClothes: function(type) {
		for (var i=0; i lt Object.keys($items).length; i++) {
			if (($items[Object.keys($items)[i]].clothingType == type) && ($items[Object.keys($items)[i]].daringRec == 5)) {
				$items[Object.keys($items)[i]].daringRec=5.5;
			}
		}
	},
	unpostponeClothes: function(type) {
		for (var i=0; i lt Object.keys($items).length; i++) {
			if ($items[Object.keys($items)[i]].daringRec == 5.5) {
				$items[Object.keys($items)[i]].daringRec=5;
			}
		}
	},
	checkUnderwear: function() {
		var u=$player.isWearingOn($itemTypes.Underwear);
		if ($player.daring lt this.daringUnderwearFemale) {
			return u && !u.female;
		} else if ($player.daring lt this.daringUnderwearNone) {
			return u;
		} else {
			return true;
		}
	},
	dressedGuardian: {
		reason: '',
		check: function() {
			var o=$player.isWearingOn($itemTypes.Outerwear);
			var s=$player.isWearingOn($itemTypes.Shoes);
			var u=$player.isWearingOn($itemTypes.Underwear);
			var br=$player.isWearingOn($itemTypes.Bras);
			var st=$player.isWearingOn($itemTypes.Stockings);
			var co=$player.isWearingOn($itemTypes.Collar);
			var hb=$player.isWearingOn($itemTypes.Hairband);
			var ea=$player.isWearingOn($itemTypes.Earrings);
			var ex=$player.isWearingOn($itemTypes.Extra);
			if (!o && u && u.female && $player.perversion.guardian lte 3) {
				this.reason="You don't feel comforable enough to do that wearing female underwear";
				return false;
			}
			if (!o && br && br.female && $player.perversion.guardian lte 3) {
				this.reason="You don't feel comforable enough to do that wearing a bra";
				return false;
			}
			if (!o && st && st.female && $player.perversion.guardian lte 3) {
				this.reason="You don't feel comforable enough to do that wearing feminine socks";
				if (st.slutty) {
					this.reason="You don't feel comforable enough to do that wearing stockings";
				}
				return false;
			}
			if (co && $player.perversion.guardian lte 3) {
				this.reason="You don't feel comforable enough to do that while wearing choker";
				if (co.slutty) {
					this.reason="You don't feel comforable enough to do that while wearing collar";
				}
				if (co.daringRec gte 8) {
					this.reason="You don't feel comforable enough to do that while wearing such collar";
				}
				return false;
			}
			if (hb && $player.perversion.guardian lte 3) {
				this.reason="You don't feel comforable enough to do that while wearing feminine hair acessorry";
				return false;
			}
			if (ex && $player.perversion.guardian lte 3) {
				this.reason="You don't feel comforable enough to do that while wearing extra acessorry";
				return false;
			}
			if (!o && $player.perversion.guardian lte 4) {
				this.reason="You don't feel comforable enough to do that without clothes";
				return false;
			}
			if (!o && !u && $player.perversion.guardian lte 4) {
				this.reason="You don't feel comforable enough to do that naked";
				return false;
			}
			if (((o && o.female) || (s && s.female)) && ($player.perversion.guardian lte 2)) {
				this.reason="You don't feel comforable enough to do that wearing female clothing";
				return false;
			}
			return true;
		}
	},
	dressedGuardianWork: {
		reason: '',
		check: function() {
			var o=$player.isWearingOn($itemTypes.Outerwear);
			if (o && o.school) {
				this.reason="Clinic policy forbids wearing a school uniform on a part time job";
				return false;
			}
			return true;
		}
	},
	dressedWhore: {
		reason: '',
		check: function() {
			var u=$player.isWearingOn($itemTypes.Underwear);
			var o=$player.isWearingOn($itemTypes.Outerwear);
			var s=$player.isWearingOn($itemTypes.Shoes);
			if (u) {
				this.reason="You don't need underwear for that";
				return false;
			}
			if (!o) {
				this.reason="You need to wear something";
				return false;
			}
			if (!s) {
				this.reason="You need to wear shoes";
				return false;
			}
			if (!o.slutty || !s.slutty) {
				this.reason="You're not dressed slutty enough";
				return false;
			}
			if (o.sleepWear) {
				this.reason="You can't wear sleepwear for that";
				return false;
			}
			return true;
		}
	},
	dressedOutside: {
		reason: '',
		check: function(mode) {
			var u=$player.isWearingOn($itemTypes.Underwear);
			var o=$player.isWearingOn($itemTypes.Outerwear);
			var s=$player.isWearingOn($itemTypes.Shoes);
			var br=$player.isWearingOn($itemTypes.Bras);
			var st=$player.isWearingOn($itemTypes.Stockings);
			var co=$player.isWearingOn($itemTypes.Collar);
			var hb=$player.isWearingOn($itemTypes.Hairband);
			var ea=$player.isWearingOn($itemTypes.Earrings);
			var ex=$player.isWearingOn($itemTypes.Extra);
			if (mode eq 1 && $player.flags.exhausted) {
				this.reason="You are too exhausted to do that";
				return false;
			}
			if (o && o.daringRec eq 13) {
				this.reason="You can't go out wearing a maid uniform";
				return false;
			}
			if (s && s.daringRec eq 13) {
				this.reason="You can't go out wearing ballet heels";
				return false;
			}
			if (!$misc.checkUnderwear()) {
				this.reason="You don't feel daring enough to do this " + (u ? "in that underwear" : "without underwear on");
				return false;
			}
			if (br && ($player.daring lt this.daringUnderwearFemale)) {
				this.reason="You don't feel daring enough to go out wearing a bra";
				return false;
			}
			if (st && ($player.daring lt this.daringUnderwearFemale)) {
				this.reason="You don't feel daring enough to go out wearing feminine socks";
				if (st.slutty) {
					this.reason="You don't feel daring enough to go out wearing stockings";
				}
				return false;
			}
			if (co && !co.slutty && ($player.daring lt this.daringCollar)) {
				this.reason="You don't feel daring enough to go out while wearing choker";
				return false;
			}
			if (co && co.slutty && ($player.daring lt co.daringRec) && !$player.flags.collarLocked) {
				this.reason="You don't feel daring enough to go out while wearing such collar";
				return false;
			}
			if (hb && ($player.daring lt this.daringHairband)) {
				this.reason="You don't feel daring enough to go out while wearing feminine hair acessorry";
				return false;
			}
			if (ex && ($player.daring lt this.daringExtra)) {
				this.reason="You don't feel daring enough to go out while wearing extra acessorry";
				return false;
			}
			if (o.sleepWear) {
				this.reason="You can't wear sleepwear outside";
				return false;
			}
			if (!s) {
				this.reason="You have to wear shoes outside";
				return false;
			}
			if (!o) {
				this.reason="You have to wear clothing outside";
				return false;
			}
			if (($player.daring lt this.daringClothesFemale) || ($player.perversion.crossdressing lt 6 && $player.perversion.teacher lt 4 && $tasksTeacher.wearDressToSchool.status lte 0)) {
				if (o.female || s.female) {
					this.reason="You don't feel daring enough to do this in female clothing";
					return false;
				}
			}
			if ($player.flags.laundryAccident && u && u.female && $player.owns($items.jocksLucky)) {
				this.reason="You don't want to go outside in wet underwear";
				return false;
			}
			return true;
		}
	},
	dressedFriend: {
		reason: '',
		check: function() {
			var u=$player.isWearingOn($itemTypes.Underwear);
			var o=$player.isWearingOn($itemTypes.Outerwear);
			var s=$player.isWearingOn($itemTypes.Shoes);
			if (!$misc.checkUnderwear()) {
				this.reason="You don't feel daring enough for " + (u ? "that" : "no") + " underwear";
				return false;
			}
			if (o.sleepWear) {
				this.reason="You can't wear sleepwear outside";
				return false;
			}
			if (!s) {
				this.reason="You have to wear shoes outside";
				return false;
			}
			if (!o) {
				this.reason="You have to wear clothing outside";
				return false;
			}
			if ($player.daring lt this.daringClothesFemale) {
				if (o.female || s.female) {
					this.reason="You don't feel daring enough with female clothing";
					return false;
				}
			}
			return true;
		}
	},
	friend: {
		he_she: 'he',
		He_She: 'He',
		him_her: 'him',
		Him_Her: 'Him',
		his_her: 'his',
		His_Her: 'His',
		his_hers: 'his',
		His_Hers: 'His',
		setPronouns: function() {
			if (!$player.flags.friendIsMale) {
				this.he_she='she';
				this.He_She='She';
				this.him_her='her';
				this.Him_Her='Her';
				this.his_her='her';
				this.His_Her='Her';
				this.his_hers='hers';
				this.His_Hers='Hers';
			}
		}
	},
	dressedTherapy: {
		reason: '',
		check: function() {
			if (!$misc.dressedOutside.check(1)) {
				this.reason=$misc.dressedOutside.reason;
				return false;
			}
			var o=$player.isWearingOn($itemTypes.Outerwear);
			var s=$player.isWearingOn($itemTypes.Shoes);
			if ((o.female || s.female) && ($player.perversion.therapist lt 3) && ($player.perversion.guardian lt 5)) {
				this.reason="You don't feel ready to visit $therapist dressed like that";
				return false;
			}
			return true;
		}
	},
	dressedSchool: {
		reason: '',
		check: function() {
			var o=$player.isWearingOn($itemTypes.Outerwear);
			var s=$player.isWearingOn($itemTypes.Shoes);
			var st=$player.isWearingOn($itemTypes.Stockings);
			var co=$player.isWearingOn($itemTypes.Collar);
			var hb=$player.isWearingOn($itemTypes.Hairband);
			var ea=$player.isWearingOn($itemTypes.Earrings);
			var ex=$player.isWearingOn($itemTypes.Extra);
			if (!$misc.dressedOutside.check(0)) {
				this.reason=$misc.dressedOutside.reason;
				return false;
			}
			if (!o.school) {
				this.reason="You need to wear the school uniform";
				return false;
			}
			if (!s.school) {
				this.reason="You need to wear proper footwear";
				return false;
			}
			if (o.school && !o.female && s.female && s.slutty) {
				this.reason="It is against rules to wear heels with pants";
				return false;
			}
			if ($player.perversion.teacher lt 8) {
				if (st && st.schoolAlt && (st.schoolAlt lt st.curAlt)) {
					this.reason="Such stockings are against school uniform regulations, I need plain black stockings";
					if (!st.slutty) {
						this.reason="Such socks are against school uniform regulations, I need plain black socks";
					}
					return false;
				}
				if (hb && hb.schoolAlt && (hb.schoolAlt lt hb.curAlt)) {
					this.reason="Such hairband is against school uniform regulations";
					return false;
				}
				if (s && s.schoolAlt && (s.schoolAlt lt s.curAlt) && (s.curAlt neq 40)) {
					this.reason="Such style of shoes is against school uniform regulations, I need more conservative looking model";
					return false;
				}
				if (s && (s.daringRec gte 7)) {
					this.reason="Such heeled shoes are against school uniform regulations";
					return false;
				}
			}
			return true;
		}
	},
	dressedSleep: {
		reason: '',
		check: function() {
			var o=$player.isWearingOn($itemTypes.Outerwear);
			var s=$player.isWearingOn($itemTypes.Shoes);
			if (s) {
				this.reason="You can't wear shoes to bed";
				return false;
			}
			if (o) {
				if (!o.sleepWear) {
					this.reason="You have to wear sleepwear to sleep";
					return false;
				}
				if (($player.daring lt this.daringUnderwearFemale) && o.female) {
					this.reason="You don't feel daring enough";
					return false;
				}
			}
			return true;
		}
	},
	dressedMaid: {
		reason: '',
		check: function() {
			var o=$player.isWearing($items.maidOutfit);
			if (!o) {
				this.reason="You have to wear the maid outfit for this";
				return false;
			}
			return true;
		}
	},
	dressedFemale: function() {
		var u=$player.isWearingOn($itemTypes.Underwear);
		var o=$player.isWearingOn($itemTypes.Outerwear);
		var s=$player.isWearingOn($itemTypes.Shoes);
		return (!u || u.female) && o.female && s.female;	
	},
	canPurgeMale: function() {
		var uf=false;  // underwear
		var of=false;  // outerwear
		var sf=false;  // shoes
		var nf=false;  // night wear
		var xf=false;  // school wear
		var zf=false;  // school shoes
		for (var i=0; i lt Object.keys($items).length; i++) {
			var o=$items[Object.keys($items)[i]];
			if ((o.clothingType neq $itemTypes.NotClothing) && $player.owns(o) && o.female) {
				if (o.clothingType eq $itemTypes.Underwear) {
					uf=true;
				}
				if (o.clothingType eq $itemTypes.Outerwear) {
					of=true;
					if (o.school) {
						xf=true;
					}
				}
				if (o.clothingType eq $itemTypes.Shoes) {
					sf=true;
					if (o.school) {
						zf=true;
					}
				}
				if (o.sleepWear) {
					nf=true;
				}
			}
		}
		return uf && of && sf && nf && xf && ($player.perversion.teacher gte 2) && ($player.perversion.guardian gte 2);
	},
	purgeMaleClothes: function() {
		for (var i=0; i lt Object.keys($items).length; i++) {
			var o=$items[Object.keys($items)[i]];
			if (o.clothingType neq $itemTypes.NotClothing && $player.owns(o) && !o.female) {
				$inventory.splice($inventory.indexOf(o.name), 1);
			}
		}
	},
	disableMaleClothes: function() {
		for (var i=0; i lt Object.keys($items).length; i++) {
			var o=$items[Object.keys($items)[i]];
			if ([$itemTypes.Underwear, $itemTypes.Outerwear, $itemTypes.Shoes].includes(o.clothingType) && !o.female) {
				o.disabled=true;
				o.cost=0;
			}
		}
	},
	isTruant: function() {
		return $player.schoolTruantDays gt 3;
	},
	canWhore: function() {
		return ($player.perversion.teacher gte 8) && ($time.hour gte 19) && ($time.hour lte 23);
	},

	canWork: function() {
		return $time.isWeekend() && ($time.hour gte 8) && ($time.hour lt 14) && ($time.day gt $player.workLastDay);
	},
	setPantiesToInsert: function() {
		for (var i=0; i lt Object.keys($items).length; i++) {
			var o=$items[Object.keys($items)[i]];
			if (o.clothingType eq $itemTypes.Underwear && o.female) {
				$items[Object.keys($items)[i]].clothingType=$itemTypes.Anal;
			}
		}
	},
	wager: {
		amount: 0,
		calculate: function() {
			if ($player.daring gte 5) {
				this.amount=$player.money;
			} else {
				this.amount=Math.trunc($player.money * ($player.daring / 5));
			}
			if (this.amount gt 20) {
				this.amount=20;
			}
		}
	},
	calcSemiPermCost: function() {
		var cost=0;
		if ($player.semiPermAss gt $player.permAss) {
			if ($player.semiPermAss == 1) { cost+=$items.AssEnhancingXL.cost; }
			if ($player.semiPermAss == 1) { cost+=$items.AssEnhancing.cost; }
		}
		if ($player.semiPermLips gt $player.permLips) {
			if ($player.semiPermLips == 1) { cost+=$items.LipsEnhancingXL.cost; }
			if ($player.semiPermLips == 1) { cost+=$items.LipsEnhancing.cost; }
		}
		if ($player.semiPermManicure gt $player.permManicure) {
			if ($player.semiPermManicure == 1) { cost+=$items.GarishManicure.cost; }
			if ($player.semiPermManicure == 1) { cost+=$items.Manicure.cost; }
		}
		if ($player.semiPermBoobs gt $player.permBoobs) {
			if ($player.semiPermBoobs == 4) { cost+=$items.breastImplantsDD.cost; }
			if ($player.semiPermBoobs == 3) { cost+=$items.breastImplantsC.cost; }
			if ($player.semiPermBoobs == 2) { cost+=$items.breastImplantsB.cost; }
			if ($player.semiPermBoobs == 1) { cost+=$items.breastImplantsA.cost; }
		}
		if ($player.semiPermMakeup gt $player.permMakeup) {
			if ($player.semiPermMakeup == 4) { cost+=$items.HeavyMakeup.cost; }
			if ($player.semiPermMakeup == 3) { cost+=$items.BimboMakeup.cost; }
			if ($player.semiPermMakeup == 2) { cost+=$items.NormalMakeup.cost; }
			if ($player.semiPermMakeup == 1) { cost+=$items.SubtleMakeup.cost; }
		}
		if ($player.semiPermAnal gt $player.permAnal) {
			if ($player.semiPermAnal == 3) { cost+=$items.analSmoothing3.cost; }
			if ($player.semiPermAnal == 2) { cost+=$items.analSmoothing2.cost; }
			if ($player.semiPermAnal == 1) { cost+=$items.analSmoothing1.cost; }
		}
		cost = 10*Math.round(cost/20);
		return cost;
	},
	getSnoopItems: function() {
		var ra=[];
		var sia=[$items.pantiesCotton, $items.vibrator, $items.playgirlMagazine, $items.pantiesLatex, $items.gString];
		for (var i=0; i lt sia.length; i++) {
			if (!$player.owns(sia[i])) {
				ra.push(sia[i]);
			}
		}
		return ra;
	},
	setwords: function() {
		$ass="ass";
		if ($player.owns($items.AssEnhancing)) { $ass="heartshaped ass"; }
		if ($player.owns($items.AssEnhancingXL)) { $ass="curvy ass"; }
		$ass="butt";
		if ($player.owns($items.AssEnhancing)) { $ass="shapely butt"; }
		if ($player.owns($items.AssEnhancingXL)) { $ass="bubble butt"; }
		$lips="lips";
		if ($player.owns($items.LipsEnhancing)) { $lips="plump lips"; }
		if ($player.owns($items.LipsEnhancingXL)) { $lips="puffy lips"; }
		$penis="penis";
		if ($player.owns($items.PenisShrinking)) { $penis="small penis"; }
		$chest="flat chest";
		if ($player.owns($items.breastImplantsA)) { $chest="tiny breasts"; }
		if ($player.owns($items.breastImplantsB)) { $chest="breasts"; }
		if ($player.owns($items.breastImplantsC)) { $chest="big breasts"; }
		if ($player.owns($items.breastImplantsDD)) { $chest="huge breasts"; }
	}
}>>\
<<set $ass="ass">>\
<<set $butt="butt">>\
<<set $chest="flat chest">>\
<<set $lips="lips">>\
<<set $penis="penis">>\
<<set $futa={
	he_she: 'he',
	He_She: 'He',
	him_her: 'him',
	Him_Her: 'Him',
	his_her: 'his',
	His_Her: 'His',
	his_hers: 'his',
	His_Hers: 'His',
	Boy_Girl: 'Boy',
	boy_girl: 'boy',
	Boys_Girls: 'Boys',
	boys_girls: 'boys',
	Guy_Girl: 'Guy',
	guy_girl: 'guy',
	setPronouns: function() {
		if ($kink.futa) {
			this.he_she='she';
			this.He_She='She';
			this.him_her='her';
			this.Him_Her='Her';
			this.his_her='her';
			this.His_Her='Her';
			this.his_hers='hers';
			this.His_Hers='Hers';
			this.Boy_Girl='Girl'
			this.boy_girl='girl'
			this.Boys_Girls='Girls'
			this.boys_girls='girls'
			this.Guy_Girl='Girl'
			this.guy_girl='girl'
		}
	}
}>>\
\
<<if (not $resetSwitch)>>\
<<goto [[Therapy structures]]>>\
<<endif>>\
\


