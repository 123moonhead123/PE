:: Setup structures [pos_2_131]
\
<<set $restock=[]>>\
<<set $stores=[
	{
		name: "Electronics Store",
		image: "electronics_store.jpg",
		description: "The electronics store sells a lot of cool gear.",
		daringRequired: 0
	},
	{
		name: "General Store",
		image: "general_store.jpg",
		description: "You can find a lot of random junk here.",
		daringRequired: 0
	},
	{
		name: "Doctor's Office",
		image: "doctor_office.jpg",
		description: "You can get surgery done here.",
		daringRequired: 1000
	},
	{
		name: "Adult Book Shop",
		image: "sex_shop.jpg",
		description: "For all your sexual needs. It feels like the cashier and other customers are staring at you.",
		daringRequired: 4
	},
	{
		name: "Fashion Central",
		image: "clothes_shop.jpg",
		description: "Don't be fooled, it's the only clothing store in this area.",
		daringRequired: 0
	},
	{
		name: "Intimate Apparel",
		image: "lingerie_shop.jpg",
		description: "For everything under your clothes.",
		daringRequired: 1
	},
	{  
		name: "Klip Klops",
		image: "shoe_shop.jpg",
		description: "Selling noisy foot things since 1985!",
		daringRequired: 0
	}
]>>\
\
<<set $sidebarControl={
	tabs: [
		{
			active: true,
			name: "Clothes",
			tableId: "clothes"
		},
		{
			active: false,
			name: "Inventory",
			tableId: "inventory"
		},
		{
			active: false,
			name: "Stats",
			tableId: "stats"
		},
		{
			active: false,
			name: "Debug",
			tableId: "debug"
		}
	],
	className: function(id) {
		return this.tabs[id].active ? "" : "hidden";
	},
	tabClassName: function(id) {
		return this.tabs[id].active ? "sidebar_tab_active" : "";
	},
	refresh: function() {
		for (var i to 0; i lt this.tabs.length; i++) {
			var o=document.getElementById(this.tabs[i].tableId);
			if (o) {
				o.className = this.className(i);
				document.getElementById('sidebar_control').children[0].children[i+1].className=this.tabClassName(i);
			}
		}
	},
	activate: function(id) {
		for (var i to 0; i lt this.tabs.length; i++) {
			this.tabs[i].active=false;
		}
		this.tabs[id].active=true;
		this.refresh();
	}
}>>\
\
<<set $kink={
	incest: false,
	incestOff: false,
	piss: false,
	pissOff: false,
	sphOff: false,
	sphProgress: 0,
	bondageOff: false,
	maso: false,
	masoOff: false,
	cum: false,
	cumOff: false,
	creampie: false,
	futa: false,

	semenConsumptionStart: false,	
	semenConsumption: false,
	creampie: false,
	bukkake: false,
	cumEating: false,
	ownCum: false,
	cumSwap: false,

	watersportsStarted: false,	
	watersports: false,
	wetting: false,
	urineDrink: false,
	urinePlay: false,
	
	smallPenisStarted: false,
	smallPenis: false,
	penisShrink: false,
	penisShrinkProgress: 0,
	sph: false,

	bdsmStarted: false,
	bdsm: false,
	painPlay: false,
	xPain: false,
	petPlay: false,
	bondage: false,
	facesit: false,
	trampling: false,

	footFetishStarted: false,
	footFetish: false,
	footDisplay: false,
	footWorship: false,
	hosiery: false,
	shoeBoot: false,
	footjob: false,

	odorStarted: false,
	odor: false,
	clothesOdor: false,
	shoeSockOdor: false,
	footOdor: false,
	armpitOdor: false,
	assOdor: false,
	genitalOdor: false,

	degradationStarted: false,
	degradation: false,
	curse: false,
	whoring: false,
	bimbo: false,
	spitting: false,
	abusive: false,
	mindControl: false,
	questionable: false,
	tattoo: false,
	piercing: false,

	agePlayStarted: false,
	agePlay: false,
	diapering: false,
	adultBaby: false,
	ageBehavior: false,

	xBodyStarted: false,
	xBody: false,
	bbw: false,
	hyperBreasts: false,
	hyperPenis: false,
	dwarf: false,
	tall: false,
	muscle: false,
	expansionWeight: false,
	
	clothingStarted: false,
	clothing: false,
	latex: false,
	leather: false,
	nylon: false,
	frilly: false,

	genderChangeStarted: false,
	genderChange: false
}>>\

<<set $kinkAllow={
	incest: false,
	incestOff: false,
	piss: false,
	pissOff: false,
	sphOff: false,
	bondageOff: false,
	maso: false,
	masoOff: false,
	cum: false,
	cumOff: false,
	creampie: false,
	futa: false,
	
	semenConsumption: false,
	creampie: false,
	bukkake: false,
	cumEating: false,
	ownCum: false,
	cumSwap: false,
	
	watersports: false,
	wetting: false,
	urineDrink: false,
	urinePlay: false,
	
	smallPenis: false,
	penisShrink: false,
	penisShrinkProgress: 0,
	sph: false,

	bdsm: false,
	painPlay: false,
	xPain: false,
	petPlay: false,
	bondage: false,
	facesit: false,
	trampling: false,

	footFetish: false,
	footDisplay: false,
	footWorship: false,
	hosiery: false,
	shoeBoot: false,
	footjob: false,

	odor: false,
	clothesOdor: false,
	shoeSockOdor: false,
	footOdor: false,
	armpitOdor: false,
	assOdor: false,
	genitalOdor: false,

	degradation: false,
	curse: false,
	whoring: false,
	bimbo: false,
	spitting: false,
	abusive: false,
	mindControl: false,
	questionable: false,
	tattoo: false,
	piercing: false,

	agePlay: false,
	diapering: false,
	adultBaby: false,
	ageBehavior: false,

	xBody: false,
	bbw: false,
	hyperBreasts: false,
	hyperPenis: false,
	dwarf: false,
	tall: false,
	muscle: false,
	expansionWeight: false,
	
	clothing: false,
	latex: false,
	leather: false,
	nylon: false,
	frilly: false,

	genderChange: false
}>>\


<<set $kinkTooltip={
	incest: "Toggles your main guardian to be your mother or a family friend, and includes sexual content",
	futa: "Most essential males will be replaced by shemales",
	
	semenConsumption: "Sex play or sensory fetish directly involving cum",
	creampie: "Ejaculating inside a sexual orifice after unprotected sex, often with visible result",
	bukkake: "Covering a partner’s body with semen during ejaculation, especially the face",
	cumEating: "Taking semen in one’s mouth to taste and/or swallow it",
	ownCum: "Ejaculating directly/indirectly in one’s own mouth and/or swallowing it",
	cumSwap: "Exchanging/passing semen with a partner orally as a form of sex play",
	
	watersports: "Sex play involving urination",
	wetting: "Urination in one’s clothing or on one’s body",
	urineDrink: "Consuming urine as an erotic act",
	urinePlay: "Urination on or exchanging urine between two people",
	
	smallPenis: "Fetish involving penis shrinking/having a small penis and the humiliation thereof",
	penisShrink: "Having your penis reduced from an average size to a diminished size",
	sph: "Being laughed at or degraded due to your penis’s lack of size",

	bdsm: "Erotic play involving dominant/submissive roles, bondage and/or pain",
	painPlay: "Acts of temporary, non-injurious infliction of pain, such as spanking, paddling, pinching or clamping",
	xPain: "Acts of potentially injurious infliction of pain, such as whipping, caning, or temperature play",
	petPlay: "Roleplay in which a subordinate is treated as a house pet and acts accordingly",
	bondage: "Being deprived of movement, speech, or senses by ropes, chains, bindings, hoods, or other implements",
	facesit: "Female-led sex play in which her sex organs/buttocks are used on her partner’s face to attain sexual pleasure and/or dominate the subordinate@@.halftransparent; Not implemented yet@@",
	trampling: "Acts in which the dominant partner walks on, stands on or steps on the submissive partner’s body@@.halftransparent; Not implemented yet@@",

	footFetish: "Fetish involving the sexualization of feet or items typically worn on the feet",
	footDisplay: "Being shown feet in a manner designed to cause sexual excitement",
	footWorship: "Arousal based on actions such as licking feet, sucking on feet, or kissing feet",
	hosiery: "Deriving sexual excitement from pantyhose, socks, stockings, or other kinds of legwear, either inherently or when worn by a partner",
	shoeBoot: "Deriving sexual excitement from heels, boots, or other types of shoes, either inherently or worn by a partner",
	footjob: "Having one’s genitalia directly stimulated by feet, either shod or naked",

	odor: "Fetish involving the sexualization of specific body parts when sweaty, smelly, or unclean@@.halftransparent; Not implemented yet@@",
	clothesOdor: "Smelling or tasting items such as tops, bottoms, or underwear@@.halftransparent; Not implemented yet@@",
	shoeSockOdor: "Smelling or tasting items such as heels, sneakers, socks, or hose@@.halftransparent; Not implemented yet@@",
	footOdor: "Smelling or tasting unwashed feet@@.halftransparent; Not implemented yet@@",
	armpitOdor: "Smelling or tasting unclean armpits@@.halftransparent; Not implemented yet@@",
	assOdor: "Smelling or tasting sweaty ass cheeks or ass crack@@.halftransparent; Not implemented yet@@",
	genitalOdor: "Smelling or tasting sweaty crotch or vagina@@.halftransparent; Not implemented yet@@",

	degradation: "Aggressive or demeaning language or physical acts",
	curse: "Use of overtly profane language or insults",
	whoring: "Treatment as worthless, sexual property to be exploited without regard@@.halftransparent; Not implemented yet@@",
	bimbo: "Conversion to a brainless, sexual playmate, with IQ loss/extreme feminization@@.halftransparent; Not implemented yet@@",
	spitting: "Physical spitting on a person, as a way to degrade them",
	abusive: "Acts of force such as slapping, shoving, mouth stretching or choking@@.halftransparent; Not implemented yet@@",
	mindControl: "Being compelled to say or do things unwillingly by deep hypnosis@@.halftransparent; Not implemented yet@@",
	questionable: "Sex where consent is ambiguous or leveraged by another@@.halftransparent; Not implemented properly yet@@",
	tattoo: "Being forced or leveraged to get a tattoo",
	piercing: "Being forced or leveraged to get a piercing",

	agePlay: "Fetish involving the role play of age differences, infantilism, and diaper play@@.halftransparent; Not implemented yet@@",
	diapering: "Wearing diapers as a punishment, humiliation tactic, medical necessity, or personal desire@@.halftransparent; Not implemented yet@@",
	adultBaby: "Being treated as a toddler baby by others, including wearing baby clothes, drinking from a bottle, using a pacifier, or sleeping in a crib@@.halftransparent; Not implemented yet@@",
	ageBehavior: "Being treated as a child by others, including being dressed in clothes associated with children or being expected to participate in childish activities@@.halftransparent; Not implemented yet@@",

	xBody: "Fetishizing large divergence in anatomy in comparison with average, especially size@@.halftransparent; Not implemented yet@@",
	bbw: "Big, beautiful women – fetishizing women with extreme body fat and/or weight@@.halftransparent; Not implemented yet@@",
	hyperBreasts: "Arousal stemming from breast size above what is considered common physically@@.halftransparent; Not implemented yet@@",
	hyperPenis: "Arousal from extreme penis size and length@@.halftransparent; Not implemented yet@@",
	dwarf: "Arousal by bodies being of unusually short stature or size@@.halftransparent; Not implemented yet@@",
	tall: "Arousal by bodies being exceptionally tall – aka giantess fetish@@.halftransparent; Not implemented yet@@",
	muscle: "Arousal by bodies being extremely muscled – aka amazon fetish@@.halftransparent; Not implemented yet@@",
	expansionWeight: "Arousal from the act of body enlargement, size and/or weight gain@@.halftransparent; Not implemented yet@@",
	
	clothing: "Fetish directly involving the feel, scent and/or appearance of clothing made from certain materials",
	latex: "Arousal from the wearing of latex/PVC rubber by yourself or a partner – aka rubberist fetish@@.halftransparent; Not implemented properly yet@@",
	leather: "Sexual arousal derived from the wearing of leather by yourself or a partner@@.halftransparent; Not implemented properly yet@@",
	nylon: "Sexual interest in the wearing of nylon by yourself or a partner@@.halftransparent; Not implemented yet@@",
	frilly: "Arousal from silk, satin or other soft, feminine materials@@.halftransparent; Not implemented yet@@",

	genderChange: "Arousal stemming from transgender sex transformation/sex organ gender change@@.halftransparent; Not implemented yet, sorry@@"
}>>\
\
<<set $avatar={
	divider: 0,
	mode: 0,
	start: false,
	help: false,
	active: false
}>>\
<<set $avatarSize=0>>\
<<set $itemsSize=2>>\
<<set $roomSize=2>>\
\
<<set $save={
	string: "",
	ieVersion: 2,
	lookupItemKeyByName: function(name) {
		var ika=Object.keys($items);
		for (var i=0; i lt ika.length; i++) {
			if ($items[ika[i]].name eq name) {
				return ika[i];
			}
		}
		return false;
	},
	convertNameToKeyArray: function(array) {
		var oia=[
			"Sensous massage oil", "massageOil",
			"Lips enchancing", "LipsEnhancing",
			"Lips enchancing extra", "LipsEnhancingXL",
			"Ass enchancing", "AssEnhancing",
			"Ass enchancing extra", "AssEnhancingXL"
		];
		for (var i=0; i lt array.length; i++) {
			var f=false;
			for (var j=0; j lt oia.length; j+=2) {
				if (oia[j] eq array[i]) {
					array[i]=oia[j+1];
					f=true;
				}
			}
			if (!f) {
				var ik=this.lookupItemKeyByName(array[i]);
				if (ik) {
					array[i]=ik;
				}
			}
		}
	},
	importObject: function(arrFrom, arrTo) {
		if (arrFrom) {
			var fka=Object.keys(arrFrom);
			for (var i=0; i lt fka.length; i++) {
				arrTo[fka[i]]=arrFrom[fka[i]];
			}
		}
	},
	secretImport: function(str) {
		var json=JSON.parse(str);
		if (!json.ieVersion) {  // <0.76
			this.convertNameToKeyArray(json.items.owned);
			this.convertNameToKeyArray(json.items.clothes);
			this.convertNameToKeyArray(json.stolen);
			this.convertNameToKeyArray(json.disabled);
			json.items.stolen=json.stolen;
			json.items.disabled=json.disabled;
		}
		$inventory=[];
		for (var i=0; i lt json.items.owned.length; i++) {
			var io=$items[json.items.owned[i]];
			if (io) {
				if ($inventory.indexOf(io.name) lt 0) {
					$inventory.push(io.name);
					if (json.items.alt1) {
						var max=io.maxAlt;
						if (max && max gt 0) {
							var bit1=json.items.alt1[i];
							var bit2=json.items.alt2[i];
							if (max gt 30) {
								for (var j=1; j lte max-30; j++) {
									io.ownAlt[j+30]=(((bit2) & (Math.pow(2,(j-1)))) gt 0);
									if (io.ownAlt[j+30]) {
										io.curAlt=j+30;
									}
								}
								max=30;
							}
							for (var j=0; j lte max; j++) {
								io.ownAlt[j]=(((bit1) & (Math.pow(2,j))) gt 0);
								if (io.ownAlt[j]) {
									io.curAlt=j;
								}
							}
						}
					}
				}
			}
		}
		$player.clothes=[];
		for (var i=0; i lt json.items.clothes.length; i++) {
			var io=$items[json.items.clothes[i]];
			if (io) {
				$player.clothes.push(io.name);
			}
		}
		for (var i=0; i lt Object.keys($items).length; i++) {
			$items[Object.keys($items)[i]].stolen=(json.items.stolen.indexOf(Object.keys($items)[i]) gte 0);
			$items[Object.keys($items)[i]].disabled=(json.items.disabled.indexOf(Object.keys($items)[i]) gte 0);
			if (json.items.alt) {
				if ((json.items.alt.indexOf(Object.keys($items)[i]) gte 0) && ($items[Object.keys($items)[i]].maxAlt)) {
					var bit=1+(json.items.alt.indexOf(Object.keys($items)[i]));
					bit=json.items.alt[bit];
					for (var j=0; j lte $items[Object.keys($items)[i]].maxAlt; j++) {
						if (!$items[Object.keys($items)[i]].ownAlt[j]) {
							$items[Object.keys($items)[i]].ownAlt[j]=(((bit) & (Math.pow(2,j))) gt 0);
						}
					}
				}
			}
			if (json.items.alts) {
				if ((json.items.alts.indexOf(Object.keys($items)[i]) gte 0) && ($items[Object.keys($items)[i]].maxAlt)) {
					var bit=1+(json.items.alts.indexOf(Object.keys($items)[i]));
					bit=json.items.alts[bit];
					$items[Object.keys($items)[i]].ownAlt[0]=true;
					for (var j=0; j lt 3; j++) {
						if (!$items[Object.keys($items)[i]].ownAlt[j+1]) {
							$items[Object.keys($items)[i]].ownAlt[j+1]=(((bit) & (Math.pow(2,j))) gt 0);
						}
					}
				}
			}
		}
		if (json.quickSlot) {
			var Num1=0;
			var Num2=0;
			for (var i=0; i lt json.quickSlot.name.length; i++) {
				$quickSlot[i].name=json.quickSlot.name[i];
				$quickSlot[i].clothes=[];
				$quickSlot[i].types=[];
				Num2+=json.quickSlot.Num[i];
				for (var j=Num1; j lt Num2; j++) {
					$quickSlot[i].clothes.push(json.quickSlot.clothes[j]);
					$quickSlot[i].types.push(json.quickSlot.types[j]);
					}
				Num1+=json.quickSlot.Num[i];	
			}
		}
		if (json.punishments) {
			for (var i=0; i lt Object.keys($punishments).length; i++) {
				for (var j=0; j lt json.punishments.description.length; j++) {
					if ($punishments[Object.keys($punishments)[i]].description eq json.punishments.description[j]) {
						$punishments[Object.keys($punishments)[i]].status=json.punishments.status[j];
						$punishments[Object.keys($punishments)[i]].active=json.punishments.active[j];
						$punishments[Object.keys($punishments)[i]].startDay=json.punishments.startDay[j];
						$punishments[Object.keys($punishments)[i]].progress=json.punishments.progress[j];
						j=json.punishments.description.length;
					}
				}
			}
		}
		if (json.tasksTeacher) {
			for (var i=0; i lt Object.keys($tasksTeacher).length; i++) {
				for (var j=0; j lt json.tasksTeacher.name.length; j++) {
					if ($tasksTeacher[Object.keys($tasksTeacher)[i]].name eq json.tasksTeacher.name[j]) {
						$tasksTeacher[Object.keys($tasksTeacher)[i]].status=json.tasksTeacher.status[j];
						$tasksTeacher[Object.keys($tasksTeacher)[i]].startPriority=json.tasksTeacher.startPriority[j];
						$tasksTeacher[Object.keys($tasksTeacher)[i]].startDay=json.tasksTeacher.startDay[j];
						$tasksTeacher[Object.keys($tasksTeacher)[i]].progress=json.tasksTeacher.progress[j];
						j=json.tasksTeacher.name.length;
					}
				}
			}
		}
		if (json.tasksTeacherBody) {
			for (var i=0; i lt Object.keys($tasksTeacherBody).length; i++) {
				for (var j=0; j lt json.tasksTeacherBody.name.length; j++) {
					if ($tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].name eq json.tasksTeacherBody.name[j]) {
						$tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].status=json.tasksTeacherBody.status[j];
						$tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].startPriority=json.tasksTeacherBody.startPriority[j];
						$tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].startDay=json.tasksTeacherBody.startDay[j];
						$tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].progress=json.tasksTeacherBody.progress[j];
						j=json.tasksTeacherBody.name.length;
					}
				}
			}
		}
		if (json.talks) {
			for (var i=0; i lt Object.keys($therapistTalks).length; i++) {
				for (var j=0; j lt json.talks.passage.length; j++) {
					if ($therapistTalks[Object.keys($therapistTalks)[i]].passage eq json.talks.passage[j]) {
						$therapistTalks[Object.keys($therapistTalks)[i]].finished=json.talks.finished[j];
						$therapistTalks[Object.keys($therapistTalks)[i]].start=json.talks.start[j];
						$therapistTalks[Object.keys($therapistTalks)[i]].progress=json.talks.progress[j];
						j=json.talks.passage.length;
					}
				}
			}
		}
		if (json.dreamsGuardian) {
			for (var i=0; i lt Object.keys($dreamsGuardian).length; i++) {
				for (var j=0; j lt json.dreamsGuardian.name.length; j++) {
					if ($dreamsGuardian[Object.keys($dreamsGuardian)[i]].name eq json.dreamsGuardian.name[j]) {
						$dreamsGuardian[Object.keys($dreamsGuardian)[i]].active=json.dreamsGuardian.active[j];
						$dreamsGuardian[Object.keys($dreamsGuardian)[i]].onceOver=json.dreamsGuardian.onceOver[j];
						$dreamsGuardian[Object.keys($dreamsGuardian)[i]].progress=json.dreamsGuardian.progress[j];
						j=json.dreamsGuardian.name.length;
					}
				}
			}
		}
		if (json.dreamsTeacher) {
			for (var i=0; i lt Object.keys($dreamsTeacher).length; i++) {
				for (var j=0; j lt json.dreamsTeacher.name.length; j++) {
					if ($dreamsTeacher[Object.keys($dreamsTeacher)[i]].name eq json.dreamsTeacher.name[j]) {
						$dreamsTeacher[Object.keys($dreamsTeacher)[i]].active=json.dreamsTeacher.active[j];
						$dreamsTeacher[Object.keys($dreamsTeacher)[i]].onceOver=json.dreamsTeacher.onceOver[j];
						$dreamsTeacher[Object.keys($dreamsTeacher)[i]].progress=json.dreamsTeacher.progress[j];
						j=json.dreamsTeacher.name.length;
					}
				}
			}
		}
		if (json.chores) {
			for (var i=0; i lt $chores.length; i++) {
				for (var j=0; j lt json.chores.name.length; j++) {
					if ($chores[i].name eq json.chores.name[j]) {
						if (json.chores.active[0]) { $chores[i].active=json.chores.active[j]; }
						$chores[i].fail=json.chores.fail[j];
						$chores[i].dayPerformed=json.chores.dayPerformed[j];
						j=json.chores.name.length;
					}
				}
			}
		}
		this.importObject(json.flags.general, $player.flags);
		this.importObject(json.flags.daring, $player.daringFlag);
		this.importObject(json.flags.tasks, $player.tasks);
		this.importObject(json.flags.jobs, $player.jobs);
		this.importObject(json.perversion, $player.perversion);
		this.importObject(json.kinks, $kink);
		this.importObject(json.kinksAllow, $kinkAllow);
		if (json.time.day) { $time.day=json.time.day; }
		if (json.time.hour) { $time.hour=json.time.hour; }
		if (json.time.minute) { $time.minute=json.time.minute; }
		if (json.player.bribe) { $bribeAmount=json.player.bribe; }
		if (!json.player.bribe) { $bribeAmount=100; }
		if (json.player.friendLastVisit) { $player.friendLastVisit=json.player.friendLastVisit; }
		if (json.player.debugA) { $player.debugA=json.player.debugA; }
		if (json.player.money) { $player.money=json.player.money; }
		if (json.player.daring) { $player.daring=json.player.daring; }
		if (json.player.arousal) { $player.arousal=json.player.arousal; }
		if (json.player.eager) { $player.eager=json.player.eager; }
		if (json.player.reluctant) { $player.reluctant=json.player.reluctant; }
		if (json.player.workLastDay) { $player.workLastDay=json.player.workLastDay; }
		if (json.player.blowjobsToday) { $player.blowjobsToday=json.player.blowjobsToday; }
		if (json.player.maxBlowjobs) { $player.maxBlowjobs=json.player.maxBlowjobs; }
		if (json.player.heelsSkill) { $player.heelsSkill=json.player.heelsSkill; }
		if (json.player.sleepCheck) { $player.sleepCheck=json.player.sleepCheck; }
		if (json.player.uploadType) { $player.uploadType=json.player.uploadType; }
		if (json.player.semiPermBoobs) { $player.semiPermBoobs=json.player.semiPermBoobs; }
		if (json.player.semiPermLips) { $player.semiPermLips=json.player.semiPermLips; }
		if (json.player.semiPermAss) { $player.semiPermAss=json.player.semiPermAss; }
		if (json.player.semiPermManicure) { $player.semiPermManicure=json.player.semiPermManicure; }
		if (json.player.semiPermMakeup) { $player.semiPermMakeup=json.player.semiPermMakeup; }
		if (json.player.semiPermAnal) { $player.semiPermAnal=json.player.semiPermAnal; }
		if (json.player.permBoobs) { $player.permBoobs=json.player.permBoobs; }
		if (json.player.permLips) { $player.permLips=json.player.permLips; }
		if (json.player.permAss) { $player.permAss=json.player.permAss; }
		if (json.player.permManicure) { $player.permManicure=json.player.permManicure; }
		if (json.player.permMakeup) { $player.permMakeup=json.player.permMakeup; }
		if (json.player.permAnal) { $player.permAnal=json.player.permAnal; }
		if (json.player.masturbationType) { $player.masturbationType=json.player.masturbationType; }
		if (json.player.alarmProgress) { $player.alarmProgress=json.player.alarmProgress; }
		if (json.player.bjDildoProgress) { $player.bjDildoProgress=json.player.bjDildoProgress; }
		if (json.player.salonTab) { $player.salonTab=json.player.salonTab; }
		/*if (json.player.salonSoftLimit) { $player.salonSoftLimit=json.player.salonSoftLimit; }*/
		/*if (json.player.salonLimit) { $player.salonLimit=json.player.salonLimit; }*/
		if (json.player.schoolLastDay) { $player.schoolLastDay=json.player.schoolLastDay; }
		if (json.player.schoolTruantDays) { $player.schoolTruantDays=json.player.schoolTruantDays; }
		if (json.player.therapistMode) { $player.therapistMode=json.player.therapistMode; }
		if (json.player.therapistLastDay) { $player.therapistLastDay=json.player.therapistLastDay; }
		if (json.player.therapistDays) { $player.therapistDays=json.player.therapistDays; }
		if (json.player.detention) { $player.detention=json.player.detention; }
		if (json.player.alarmClockGuardian) { $player.alarmClockGuardian=json.player.alarmClockGuardian; }
		if (json.player.batteryExpireDay) { $player.batteryExpireDay=json.player.batteryExpireDay; }
		if (json.player.bribeDiscount) { $player.bribeDiscount=json.player.bribeDiscount; }
		if (json.player.bribeDay) { $player.bribeDay=json.player.bribeDay; }
		if (json.player.hairColor) { $player.hairColor=json.player.hairColor; }
		if (json.player.chastityUsedTo) { $player.chastityUsedTo=json.player.chastityUsedTo; }
		if (json.player.vibratorUsedTo) { $player.vibratorUsedTo=json.player.vibratorUsedTo; }
		if (json.player.choresPercent) { $player.choresPercent=json.player.choresPercent; }
		if (json.player.choreFails) { $player.choreFails=json.player.choreFails; }
		if (json.player.choreFailsCurrent) { $player.choreFailsCurrent=json.player.choreFailsCurrent; }
		if (json.player.cameraBathroom) { $player.camera.bathroom=json.player.cameraBathroom; }
		if (json.player.cameraBedroom) { $player.camera.bedroom=json.player.cameraBedroom; }
		if (json.player.surgery) { $player.surgery=json.player.surgery; }
		if (json.player.roomStyle) { $player.room.style=json.player.roomStyle; }
		if (json.player.roomLamp) { $player.room.lamp=json.player.roomLamp; }
		if (json.masturbate.lastDay) { $player.masturbate.lastDay=json.masturbate.lastDay; }
		if (json.masturbate.lastHour) { $player.masturbate.lastHour=json.masturbate.lastHour; }
		if (json.masturbate.lastMinute) { $player.masturbate.lastMinute=json.masturbate.lastMinute; }
		if (json.allowance) { $allowance=json.allowance; }
		if (json.workRate) { $workRate=json.workRate; }
		if (json.names.player) { $player.name=json.names.player; }
		if (json.names.teacher) { $teacher=json.names.teacher; }
		if (json.names.therapist) { $therapist=json.names.therapist; }
		if (json.names.babysitter) { $babysitter=json.names.babysitter; }
		if (json.names.friend) { $friend=json.names.friend; }
		if (json.names.guardian) { $guardian=json.names.guardian; }
		if ($kink.incest) {
			$guardian="your mother";
			$Guardian="Your mother";
			$myguardian="my mother";
			$Myguardian="My mother";
		}
		if (not $kink.incest) {
			$guardian=json.names.babysitter;
			$Guardian=json.names.babysitter;
			$myguardian=json.names.babysitter;
			$Myguardian=json.names.babysitter;
		}
		if (json.names.bully) { $bully=json.names.bully; }
		if (json.names.friend) { $misc.friend.setPronouns(); }
		if ($kink.futa) { $futa.setPronouns(); }
		if ($player.hairColor eq 0) {
			$items.HairShort.image="hair_short_black.jpg";
			$items.HairMedium.image="hair_medium_black.jpg";
			$items.HairLong.image="hair_long_black.jpg";
			$items.HairPigtails.image="hair_pigtails_black.jpg";
			$items.HairCurly.image="hair_curly_black.jpg";
		}
		if ($player.hairColor eq 1) {
			$items.HairShort.image="hair_short_brown.jpg";
			$items.HairMedium.image="hair_medium_brown.jpg";
			$items.HairLong.image="hair_long_brown.jpg";
			$items.HairPigtails.image="hair_pigtails_brown.jpg";
			$items.HairCurly.image="hair_curly_brown.jpg";
		}
		if ($player.hairColor eq 2) {
			$items.HairShort.image="hair_short_red.jpg";
			$items.HairMedium.image="hair_medium_red.jpg";
			$items.HairLong.image="hair_long_red.jpg";
			$items.HairPigtails.image="hair_pigtails_red.jpg";
			$items.HairCurly.image="hair_curly_red.jpg";
		}
		if ($player.hairColor eq 3) {
			$items.HairShort.image="hair_short_blonde.jpg";
			$items.HairMedium.image="hair_medium_blonde.jpg";
			$items.HairLong.image="hair_long_blonde.jpg";
			$items.HairPigtails.image="hair_pigtails_blonde.jpg";
			$items.HairCurly.image="hair_curly_blonde.jpg";
		}
		if ($player.hairColor eq 4) {
			$items.HairShort.image="hair_short_silver.jpg";
			$items.HairMedium.image="hair_medium_silver.jpg";
			$items.HairLong.image="hair_long_silver.jpg";
			$items.HairPigtails.image="hair_pigtails_silver.jpg";
			$items.HairCurly.image="hair_curly_silver.jpg";
		}
		if ($player.hairColor eq 5) {
			$items.HairShort.image="hair_short_pink.jpg";
			$items.HairMedium.image="hair_medium_pink.jpg";
			$items.HairLong.image="hair_long_pink.jpg";
			$items.HairPigtails.image="hair_pigtails_pink.jpg";
			$items.HairCurly.image="hair_curly_pink.jpg";
		}
		if ($player.owns($items.PermanentSubtleMakeup)) {
			$player.permMakeup=1;
		}
		if ($player.owns($items.PermanentNormalMakeup)) {
			$player.permMakeup=2;
		}
		if ($player.owns($items.PermanentBimboMakeup)) {
			$player.permMakeup=3;
		}
		if ($player.owns($items.PermanentHeavyMakeup)) {
			$player.permMakeup=4;
		}
		if ($player.owns($items.LipsPermanent)) {
			if ($player.owns($items.LipsEnhancingXL)) {
				$player.permLips=2;
			}
			if ($player.owns($items.LipsEnhancing)) {
				$player.permLips=1;
			}
		}
		if ($player.owns($items.AssPermanent)) {
			if ($player.owns($items.AssEnhancingXL)) {
				$player.permAss=2;
			}
			if ($player.owns($items.AssEnhancing)) {
				$player.permAss=1;
			}
		}
		if ($player.owns($items.breastPermanent)) {
			if ($player.owns($items.breastImplantsDD)) {
				$player.permBoobs=4;
			}
			if ($player.owns($items.breastImplantsC)) {
				$player.permBoobs=3;
			}
			if ($player.owns($items.breastImplantsB)) {
				$player.permBoobs=2;
			}
			if ($player.owns($items.breastImplantsA)) {
				$player.permBoobs=1;
			}
		}
		$misc.removeOldPermanents();
		$misc.setCage();
		if ($player.perversion.teacher gte 10) {
			$items.stilettoHeels.school=true;
		}
		if ($items.pantiesCotton.stolen) {
			$items.gString.ownAlt[40]=true;
			$items.bra.ownAlt[40]=true;
		}
		if ($items.gString.stolen) {
			$items.gString.ownAlt[40]=true;
			$items.braSexy.ownAlt[40]=true;
		}
		if ($items.pantiesLatex.stolen) {
			$items.pantiesLatex.ownAlt[40]=true;
		}
		if ($player.flags.teacherPanties) {
			$items.gString.ownAlt[41]=true;
		}
		if ($player.perversion.teacher eq 3) {
			if ($items.flats.ownAlt.lenght gt 0) {
				$items.flats.ownAlt[0]=true;
			}
			if ($items.highHeel3.ownAlt.lenght gt 0) {
				$items.highHeel3.ownAlt[0]=true;
			}
		}
		if ($player.perversion.guardian gte 5) {
			if ($player.room.style eq 0) { $player.room.style = 5; }
			if ($player.room.style eq 1) { $player.room.style = 6; }
			if ($player.room.style eq 2) { $player.room.style = 7; }
			if ($player.room.style eq 3) { $player.room.style = 8; }
			if ($player.room.style eq 4) { $player.room.style = 9; }
		}
		if ($player.room.style gte 5) {
			$items.roomGamer.image="room_gamer_girl.jpg";
			$items.roomPunk.image="room_punk_girl.jpg";
			$items.roomGeek.image="room_geek_girl.jpg";
			$items.roomSport.image="room_sport_girl.jpg";
			$items.roomGirly.cost=100;
		}
		if ($player.room.style gte 10) {
			$items.roomGamer.disabled=true;
			$items.roomPunk.disabled=true;
			$items.roomGeek.disabled=true;
			$items.roomSport.disabled=true;
			$items.roomGirly.disabled=true;
		}
	},
	copyToClip: function() {
		var textArea=document.createElement("textArea");
		textArea.value=this.export();
		document.body.appendChild(textArea);
		textArea.select();
		document.execCommand("Copy");
		alert("Copied the string");
		document.body.removeChild(textArea);
		textArea.remove();
	},
	secretExport: function() {
		var json={
			names: {},
			items: {
				owned: [],
				clothes: [],
				stolen: [],
				disabled: [],
				alt1: [],
				alt2: []
			},
			quickSlot: {
				name: [],
				clothes: [],
				types: [],
				Num: []
			},
			punishmentsTeacher: {
				name: [],
				status: [],
				active: [],
				startDay: [],
				progress: []
			},
			tasksTeacher: {
				name: [],
				status: [],
				startPriority: [],
				startDay: [],
				progress: []
			},
			tasksTeacherBody: {
				name: [],
				status: [],
				startPriority: [],
				startDay: [],
				progress: []
			},
			talks: {
				passage: [],
				finished: [],
				start: [],
				progress: []
			},
			dreamsGuardian: {
				name: [],
				active: [],
				onceOver: [],
				progress: []
			},
			dreamsTeacher: {
				name: [],
				active: [],
				onceOver: [],
				progress: []
			},
			chores: {
				name: [],
				active: [],
				fail: [],
				dayPerformed: []
			},
			flags: {},
			time: {},
			player: {},
			masturbate: {}
		};
		for (var i=0; i lt Object.keys($items).length; i++) {
			if ($inventory.indexOf($items[Object.keys($items)[i]].name) gte 0) {
				json.items.owned.push(Object.keys($items)[i]);
				var bit=0;
				var step=1;
				var max=$items[Object.keys($items)[i]].maxAlt;
				if (max && max gt 30) {
					for (var j=1; j lte (max-30); j++) {
						if ($items[Object.keys($items)[i]].ownAlt[j+30]) {
							bit+=step;
						}
						step*=2;
					}
					max=30;
				}
				json.items.alt2.push(bit);
				bit=0;
				step=1;
				if (max && max gt 0) {
					for (var j=0; j lte max; j++) {
						if ($items[Object.keys($items)[i]].ownAlt[j]) {
							bit+=step;
						}
						step*=2;
					}
				}
				json.items.alt1.push(bit);
			}
			if ($player.clothes.indexOf($items[Object.keys($items)[i]].name) gte 0) {
				json.items.clothes.push(Object.keys($items)[i]);
			}
		}
		for (var i=0; i lt $quickSlot.length; i++) {
			json.quickSlot.name.push($quickSlot[i].name);
			for (var j=0; j lt $quickSlot[i].clothes.length; j++) {
				json.quickSlot.clothes.push($quickSlot[i].clothes[j]);
				}
			json.quickSlot.Num.push($quickSlot[i].clothes.length);
			for (var j=0; j lt $quickSlot[i].types.length; j++) {
				json.quickSlot.types.push($quickSlot[i].types[j]);
				}
		}
		for (var i=0; i lt $chores.length; i++) {
			json.chores.name.push($chores[i].name);
			json.chores.active.push($chores[i].active);
			json.chores.fail.push($chores[i].fail);
			json.chores.dayPerformed.push($chores[i].dayPerformed);
		}
		for (var i=0; i lt Object.keys($punishments).length; i++) {
			if ($punishments[Object.keys($punishments)[i]].status gt 0 || $punishments[Object.keys($punishments)[i]].progress gt 0) {
				json.punishments.description.push($punishments[Object.keys($punishments)[i]].description);
				json.punishments.status.push($punishments[Object.keys($punishments)[i]].status);
				json.punishments.active.push($punishments[Object.keys($punishments)[i]].active);
				json.punishments.startDay.push($punishments[Object.keys($punishments)[i]].startDay);
				json.punishments.progress.push($punishments[Object.keys($punishments)[i]].progress);
			}
		}
		for (var i=0; i lt Object.keys($tasksTeacher).length; i++) {
			if ($tasksTeacher[Object.keys($tasksTeacher)[i]].status gt 0 || $tasksTeacher[Object.keys($tasksTeacher)[i]].progress gt 0) {
				json.tasksTeacher.name.push($tasksTeacher[Object.keys($tasksTeacher)[i]].name);
				json.tasksTeacher.status.push($tasksTeacher[Object.keys($tasksTeacher)[i]].status);
				json.tasksTeacher.startPriority.push($tasksTeacher[Object.keys($tasksTeacher)[i]].startPriority);
				json.tasksTeacher.startDay.push($tasksTeacher[Object.keys($tasksTeacher)[i]].startDay);
				json.tasksTeacher.progress.push($tasksTeacher[Object.keys($tasksTeacher)[i]].progress);
			}
		}
		for (var i=0; i lt Object.keys($tasksTeacherBody).length; i++) {
			if ($tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].status gt 0 || $tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].progress gt 0) {
				json.tasksTeacherBody.name.push($tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].name);
				json.tasksTeacherBody.status.push($tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].status);
				json.tasksTeacherBody.startPriority.push($tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].startPriority);
				json.tasksTeacherBody.startDay.push($tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].startDay);
				json.tasksTeacherBody.progress.push($tasksTeacherBody[Object.keys($tasksTeacherBody)[i]].progress);
			}
		}
		for (var i=0; i lt Object.keys($therapistTalks).length; i++) {
			json.talks.passage.push($therapistTalks[Object.keys($therapistTalks)[i]].passage);
			json.talks.finished.push($therapistTalks[Object.keys($therapistTalks)[i]].finished);
			json.talks.start.push($therapistTalks[Object.keys($therapistTalks)[i]].start);
			json.talks.progress.push($therapistTalks[Object.keys($therapistTalks)[i]].progress);
		}
		for (var i=0; i lt Object.keys($dreamsGuardian).length; i++) {
			json.dreamsGuardian.name.push($dreamsGuardian[Object.keys($dreamsGuardian)[i]].name);
			json.dreamsGuardian.active.push($dreamsGuardian[Object.keys($dreamsGuardian)[i]].active);
			json.dreamsGuardian.onceOver.push($dreamsGuardian[Object.keys($dreamsGuardian)[i]].onceOver);
			json.dreamsGuardian.progress.push($dreamsGuardian[Object.keys($dreamsGuardian)[i]].progress);
		}
		for (var i=0; i lt Object.keys($dreamsTeacher).length; i++) {
			json.dreamsTeacher.name.push($dreamsTeacher[Object.keys($dreamsTeacher)[i]].name);
			json.dreamsTeacher.active.push($dreamsTeacher[Object.keys($dreamsTeacher)[i]].active);
			json.dreamsTeacher.onceOver.push($dreamsTeacher[Object.keys($dreamsTeacher)[i]].onceOver);
			json.dreamsTeacher.progress.push($dreamsTeacher[Object.keys($dreamsTeacher)[i]].progress);
		}
		json.flags.general=$player.flags;
		json.flags.daring=$player.daringFlag;
		json.flags.tasks=$player.tasks;
		json.flags.jobs=$player.jobs;
		json.time.day=$time.day;
		json.time.hour=$time.hour;
		json.time.minute=$time.minute;
		json.player.bribe=$bribeAmount;
		json.player.friendLastVisit=$player.friendLastVisit;
		json.player.debugA=$player.debugA;
		json.player.money=$player.money;
		json.player.daring=$player.daring;
		json.player.arousal=$player.arousal;
		json.player.eager=$player.eager;
		json.player.reluctant=$player.reluctant;
		json.player.workLastDay=$player.workLastDay;
		json.player.blowjobsToday=$player.blowjobsToday;
		json.player.maxBlowjobs=$player.maxBlowjobs;
		json.player.heelsSkill=$player.heelsSkill;
		json.player.sleepCheck=$player.sleepCheck;
		json.player.uploadType=$player.uploadType;
		json.player.semiPermBoobs=$player.semiPermBoobs;
		json.player.semiPermLips=$player.semiPermLips;
		json.player.semiPermAss=$player.semiPermAss;
		json.player.semiPermManicure=$player.semiPermManicure;
		json.player.semiPermMakeup=$player.semiPermMakeup;
		json.player.semiPermAnal=$player.semiPermAnal;
		json.player.permBoobs=$player.permBoobs;
		json.player.permLips=$player.permLips;
		json.player.permAss=$player.permAss;
		json.player.permManicure=$player.permManicure;
		json.player.permMakeup=$player.permMakeup;
		json.player.permAnal=$player.permAnal;
		json.player.masturbationType=$player.masturbationType;
		json.player.alarmProgress=$player.alarmProgress;
		json.player.bjDildoProgress=$player.bjDildoProgress;
		json.player.salonTab=$player.salonTab;
		json.player.salonSoftLimit=$player.salonSoftLimit;
		json.player.salonLimit=$player.salonLimit;
		json.player.schoolLastDay=$player.schoolLastDay;
		json.player.schoolTruantDays=$player.schoolTruantDays;
		json.player.therapistMode=$player.therapistMode;
		json.player.therapistLastDay=$player.therapistLastDay;
		json.player.therapistDays=$player.therapistDays;
		json.player.detention=$player.detention;
		json.player.alarmClockGuardian=$player.alarmClockGuardian;
		json.player.batteryExpireDay=$player.batteryExpireDay;
		json.player.bribeDiscount=$player.bribeDiscount;
		json.player.bribeDay=$player.bribeDay;
		json.player.hairColor=$player.hairColor;
		json.player.chastityUsedTo=$player.chastityUsedTo;
		json.player.vibratorUsedTo=$player.vibratorUsedTo;
		json.player.choresPercent=$player.choresPercent;
		json.player.choreFails=$player.choreFails;
		json.player.choreFailsCurrent=$player.choreFailsCurrent;
		json.player.cameraBathroom=$player.camera.bathroom;
		json.player.cameraBedroom=$player.camera.bedroom;
		json.player.surgery=$player.surgery;
		json.player.roomStyle=$player.room.style;
		json.player.roomLamp=$player.room.lamp;
		json.perversion=$player.perversion;
		json.masturbate.lastDay=$player.masturbate.lastDay;
		json.masturbate.lastHour=$player.masturbate.lastHour;
		json.masturbate.lastMinute=$player.masturbate.lastMinute;
		json.kinks=$kink;
		json.kinksAllow=$kinkAllow;
		for (var i=0; i lt Object.keys($items).length; i++) {
			if ($items[Object.keys($items)[i]].stolen) {
				json.items.stolen.push(Object.keys($items)[i]);
			}
			if ($items[Object.keys($items)[i]].disabled) {
				json.items.disabled.push(Object.keys($items)[i]);
			}
		}
		json.allowance=$allowance;
		json.workRate=$workRate;
		json.names.player=$player.name;
		json.names.teacher=$teacher;
		json.names.therapist=$therapist;
		json.names.babysitter=$babysitter;
		json.names.guardian=$guardian;
		json.names.friend=$friend;
		if ($kink.incest) {
			json.names.Guardian="Your mother";
			json.names.myguardian="my mother";
			json.names.Myguardian="My mother";
		}
		if (not $kink.incest) {
			json.names.Guardian=$babysitter;
			json.names.myguardian=$babysitter;
			json.names.Myguardian=$babysitter;
		}
		json.names.bully=$bully;
		json.ieVersion=this.ieVersion;
		return JSON.stringify(json);
	},
	import: function(str) {
		this.secretImport(atob(str));
//		this.secretImport(str);
	},
	export: function() {
		return btoa(this.secretExport());
//		return this.secretExport();
	}
}>>\
\
<<if (not $resetSwitch)>>\
<<goto [[Items structures]]>>\
<<endif>>\
\


