:: StorySettings
ifid:CB22C9D7-4AE9-43FB-8A89-6C3226DCBE10


:: StoryTitle
Perverted Education


:: Story Stylesheet [stylesheet]

/*<lead characters>*/
.guardian {
	color: #ffc0cb; /* standard pink, RGB: 255, 192, 203 */
	font-weight: bold;
}

.heroT { /* Used for expressing the player character's (PC's) internal thoughts and reactions */
	color: #00bfff; /* standard deepskyblue, RGB: 0, 91, 255 */
	font-weight: bold;
}

.hero { /* Used for PC's actual spoken dialog */
	color: #00bfff; /* standard deepskyblue, RGB: 0, 91, 255 */
	font-style: bold;
}

.teacher { 
	color: #ffaf7f; /* peach, RGB: 0, 91, 255 */
	font-weight: bold;
}

.therapist {
	color: #88ced1; /* light cyan, RGB: 136, 206, 209 */
	font-weight: bold;
}
/*</lead characters>*/
/*<supporting cast>*/
.assistant { /* Miss Willow's Assistant */
	color: #bd93d3; /* periwinkle purple, 189, 147, 211 */
	font-weight: bold;
}

.boyfriend { /* In general use for several characters*/
	color: #ad67AA; /* light indigo, RGB 173, 103, 170*/
	font-weight: bold;
}

.bully { /* School bully */
	color: #fd1700; /* bright red, RGB 173, 103, 170*/
	font-weight: bold;
}

.bully2 { /* School troublemaker */
	color: #ad5700; /* bronze, RGB 173, 87, 0*/
	font-weight: bold;
}

.coach { /* School coach */
	color: #efef7f; /* blonde yellow, RGB 239, 239, 127*/
	font-weight: bold;
}

.friend { /* PC's best friend since childhood */
	color: #984c87; /* plum, RGB: 152, 76, 135 */
	font-weight: bold;
}

.nurse { /* Nancy, the nurse at the salon */
	color: #de70ba; /* bright pink, RGB: 222, 32, 186 */
	font-weight: bold;
}

.sexEd { /* Miss Willow, the health class teacher */
	color: #cc33ff; /* lilac purple, RGB 204, 51, 255*/
	font-weight: bold;
}

.shopAd { /* Mistress Lash, adult store manager */
	color: #a45ee5; /* amethyst purple, RGB 164, 94, 229*/
	font-weight: bold;
}

.shopclothes { /* Guardian's friend, the clothing store shopkeeper */
	color: #ff7070; /* coral pink, RGB 254, 125, 104*/
	font-weight: bold;
}

.shopphoto { /* The electronics store shopkeeper */
	color: #fdab9f; /* salmon pink, RGB 253, 171, 159*/
	font-weight: bold;
}

.writer { /* Guardian's friend, the writer */
	color: #fc4c4e; /* strawberry red, RGB 252, 76, 78*/
	font-style: bold;
}
/*</supporting characters>*/
/*<miscellaneous cast>*/
.femvoice1 {
	color: #cc3333; /* cardinal, RGB 204, 51, 51*/
	font-weight: bold;
}

.femvoice2 {
	color: #993399; /* violet, RGB 153, 51, 153*/
	font-weight: bold;
}

.femvoice3 {
	color: #e49de4; /* light pink, RGB 228, 157, 228*/
	font-weight: bold;
}

.femvoice4 {
	color: #7030a0; /* light violet, RGB 112, 48, 160*/
	font-weight: bold;
}

.femvoice5 {
	color: #948cfe; /* light stone blue, RGB 148, 140, 254*/
	font-weight: bold;
}

.femvoice6 {
	color: #f9812a; /* tangerine, RGB 249, 129, 42*/
	font-weight: bold;
}

.femvoice7 {
	color: #ff47a3; /* fuscia, RGB 228, 157, 228*/
	font-weight: bold;
}

.femvoice8 {
	color: #ff79c6; /* watermelon pink, RGB - 255, 121, 198*/
	font-weight: bold;
}

.femvoice9 {
	color: #8fffff; /* arctic blue, RGB 143, 255, 255*/
	font-weight: bold;
}

.femvoice10 {
	color: #ff9d99; /* rose pink, RGB 255, 157, 153*/
	font-weight: bold;
}

.femvoice11 {
	color: #ffe599; /* daffodil yellow, RGB 255, 229, 153*/
	font-weight: bold;
}

.malevoice1 {
	color: #336666; /* ocean blue, RGB 228, 157, 228*/
	font-weight: bold;
}

.malevoice2 {
	color: #3300cc; /* shamrock green, RGB 19, 163, 26*/
	font-weight: bold;
}

.malevoice3 {
	color: #006699; /* deep teal, RGB 0, 102, 153 */
	font-weight: bold;
}

.malevoice4 {
	color: #70ad47; /* pear green, RGB 112, 173, 71*/
	font-weight: bold;
}

.malevoice5 {
	color: #7b7b7b; /* sage green, RGB 123, 123, 123*/
	font-weight: bold;
}

.malevoice6 {
	color: #13a31a; /* shamrock green, RGB 19, 163, 26*/
	font-weight: bold;
}

.malevoice7 {
	color: #061094; /* admiral blue, RGB 6, 16, 148*/
	font-weight: bold;
}

.malevoice8 {
	color: #3e2f8c; /* med indigo, RGB 62, 47, 140*/
	font-weight: bold;
}

.malevoice9 {
	color: #5a7d5b; /* crocodile green, RGB 90, 125, 91*/
	font-weight: bold;
}

.malevoice10 {
	color: #466d1e; /* moss green, RGB 70, 109, 30*/
	font-weight: bold;
}

.malevoice11 {
	color: #13a31a; /* dark khaki, RGB 19, 163, 26*/
	font-weight: bold;
}
/*</miscellaneous voices>*/
/*<cheerleading cast>*/
.cheerBitch { 
	color: #ffc000 /* gold, RGB 255, 192, 0 */
	font-weight: bold;
}

.cheerBro { 
	color: #ed7d31 /* light orange, RGB 90, 42, 10 */
	font-weight: bold;
}

.cheerCaptain { 
	color: #8d42c6 /* lavender, RGB 141, 66, 198 */
	font-weight: bold;
}

.cheerFriend { 
	color: #00b050 /* mint green, RGB 0, 176, 80 */
	font-weight: bold;
}

.cheerLackey1 { 
	color: #cdcf37 /* lemon yellow, RGB 205, 207, 55 */
	font-weight: bold;
}

.cheerLackey2 { 
	color: #87075c /* violet, RGB 135, 7, 92 */
	font-weight: bold;
}

.cheerTraitor { 
	color: #ff0066 /* magenta, RGB 255, 0, 72 */
	font-weight: bold;
}

/*</cheerleading cast>*/
/*<club cast>*/
.bodyguard { 
	color: #4d1f7b /* indigo, RGB 77, 31, 123 */
	font-weight: bold;
}

.clubBouncer1 { 
	color: #ff0000 /* bright red, RGB 255, 0, 0 */
	font-weight: bold;
}

.clubBouncer2 { 
	color: #c00000 /* red, RGB 196, 0, 0 */
	font-weight: bold;
}
 
.clubDJ { 
	color: #ad67aa /* lavender, RGB 204, 153, 204 */
	font-weight: bold;
}

.mrJ { 
	color: #202c66 /* dark teal, RGB 32, 44, 102 */
	font-weight: bold;
}

.ownerF { 
	color: #f4b083 /* sepia, RGB 244, 176, 131 */
	font-weight: bold;
}

.ownerM { 
	color: #f4b083 /* powder blue, RGB 172, 185, 202 */
	font-weight: bold;
}


/*</club cast>*/
/*<utility and narrative colors>*/
.titlefont {
    font-size: 21px;
    font-weight: bold;
}

.dream {
	color: #4682b4;
	animation-duration: 5s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: alternate;
	animation-fill-mode: both;
	animation-iteration-count: infinite;
	animation-play-state: running;
	animation-name: halfopac;
}

.quickSetSave {
	animation-duration: 1s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: both;
	animation-iteration-count: single;
	animation-play-state: running;
	animation-name: halfopac;
}

.green { /* Misc green for options and menus */
	color: #669966; /* light olive green, RGB 102, 153, 102 */
	font-weight: bold;
}

.info { /* Player notifications */
	color: #ffccff; /* pale pink, RGB 255, 204, 255 */
	font-weight: bold;
}

.itemInfo { /* Information about item */
	display: inline-block;
	/*width: 70%;*/
	padding: 5px 10px 5px 10px;
	border: 1px Solid #404040;
	border-radius: 4px;
	background-color: #111111;
	/*font-weight: bold;*/
}

.penalty { /* Notifications of money or items lost */
	color: #cc3333; /* rose red, RGB 204, 51, 51 */
	font-weight: bold;
}

.red { /* Misc red for options and menus */
	color: #ff0000; /* standard red, RGB 102, 153, 102 */
	font-weight: bold;
}

.reward { /* Notifications of money or items received */
	color: #77AAee; /* sapphire blue, RGB 119, 170, 238 */
	font-weight: bold;
}

.snapMsg { /* Small font for text message passages - use with sender's name in all-caps */
    color: #0099ff; /* cerulean blue, RGB 0, 153, 255 */
    font-weight: bold;
    font-size: 10px;
	float: left;
	width: 300px;
	text-align: left;
}

.snapReply { /* Small font for text message passages - use with recipient's name in all-caps */
    color: #cc6699; /* punch pink, RGB 204, 102, 153 */
    font-weight: bold;
    font-size: 10px;
	float: left;
	width: 300px;
	text-align: left;
}

.statUp { /* Used for daring increase notifications */
	color: #00bfff; /* standard deepskyblue, RGB 0, 191, 255 */
	font-weight: bold;
}

.statusSatisfied { /* Arousal status 1/8: Pacified */
	color: #77AAee; /* light blue, RGB 119, 170, 238 */
	font-weight: bold;
	opacity:0.6;
}

.statusRelaxed { /* Arousal status 2/8: Satisfied */
	color: #77eeee; /* cyan, RGB 119, 238, 238 */
	font-weight: bold;
	opacity:0.6;
}

.statusCalm { /* Arousal status 3/8: Tense */
	color: #ffAAee; /* light purple, RGB 225, 170, 238 */
	font-weight: bold;
	opacity:0.6;
}

.statusHorny0 { /* Arousal status 4/8: Horny */
	color: #bd1700; /* red, RGB 189, 23, 0 */
	font-weight: bold;
	opacity:0.7;
}

.statusHorny1 { /* Arousal status 5/8: Horny */
	color: #cd1700; /* red, RGB 205, 23, 0 */
	font-weight: bold;
	opacity:0.8;
}

.statusHorny2 { /* Arousal status 6/8: Horny */
	color: #dd1700; /* red, RGB 221, 23, 0 */
	font-weight: bold;
	opacity:0.85;
}

.statusHorny3 { /* Arousal status 7/8: Horny */
	color: #ed1700; /* red, RGB 237, 23, 0 */
	font-weight: bold;
	opacity:0.9;
}

.statusHorny4 { /* Arousal status 8/8: Horny */
	color: #fd1700; /* red, RGB 253, 23, 0 */
	font-weight: bold;
}

.worn, .owned, .done, .deny { /* Various menu notifications such as action failures, already having items, etc */
	color: #008000; /* standard green, RGB 0, 128, 0 */
	font-style: italic;
}

.clothesDivider { /* Divider for clothes types at wardrobe */
	height: 1px;
	width: 150px;
	background: #404040;
}

.clothesCategory { /* Divider for clothes types at wardrobe */
	height: 12pt;
	font-size: 10pt;
	/*border: 2px #404040;*/
	padding-bottom: 5px;
}
/*</utility and narrative colors>*/
/*<structural and formatting>*/
.fontIcons{
  font-family: tme-fa-icons;
}

.locked {
    color: white;
	opacity: 0.5;
    font-family: tme-fa-icons;
}

.on {
    color: #6688dd;
    font-family: tme-fa-icons;
}

.off {
    color: #323232;
	font-family: tme-fa-icons;
}

.floatingText {
  margin: 0 auto;
  height: 10px;
  animation: shake 3.0s infinite;
  transform: translate(0, 0);
  perspective: 1000px;
}

.floatingText2 {
  margin: 0 auto;
  height: 10px;
  animation: shake 3.0s -1.5s infinite;
  transform: translate(0, 0);
  perspective: 1000px;
}

.floatingText:hover {
  animation: shakeSlow 2.82s cubic-bezier(.36,.07,.19,.97) infinite;
  backface-visibility: hidden;
  perspective: 1000px;
}

.floatingText2:hover {
  animation: shakeSlow 2.82s cubic-bezier(.36,.07,.19,.97) infinite;
  backface-visibility: hidden;
  perspective: 1000px;
}

@keyframes shake {
  5% {
    transform: translate(-2px, -5px);
	font-size: 90%;
  }

  10%, 90% {
    transform: translate(-5px, -5px);
  }
  
  15% {
    transform: translate(1px, -5px);
  }
  
  20%, 80% {
	transform: translate(-4px, 4px);
  }
  
  25% {
    transform: translate(-11px, 8px);
  }

  30%, 50%, 70% {
	transform: translate(-8px, -6px);
  }
  
  45% {
    transform: translate(-5px, 10px);
	font-size: 120%;
  }

  40%, 60% {
	transform: translate(8px, 3px);
  }
}

@keyframes shake2 {
  5% {
    transform: translate(-2px, -5px);
  }

  10%, 90% {
    transform: scale(0.9, 0.9) translate(-5px, -5px);
  }
  
  15% {
    transform: translate(1px, -5px);
  }
  
  20%, 80% {
	transform: scale(1.1, 1.1) translate(4px, 4px);
  }
  
  25% {
    transform: translate(11px, 8px);
  }

  30%, 50%, 70% {
	transform: scale(0.95, 0.95) translate(-8px, 6px);
  }

  40%, 60% {
	transform: scale(1.05, 1.05) translate(8px, 6px);
  }
}

@keyframes shakeSlow {
  10%, 90% {
    transform: translate(-1px, -1px);
  }
  
  20%, 80% {
    transform: translate(2px, -2px);
  }

  30%, 50%, 70% {
    transform: translate(-2px, 2px);
  }

  40%, 60% {
    transform: translate(2px, 1px);
  }
}


.avatar_0 {
	float: right;
    position: absolute;
	top: 0px;
	right: 0px;
}

.avatar_1 {
	float: right;
    position: absolute;
	top: 0px;
	right: 0px;
	max-height: 800px;
}

.avatar_2 {
	float: right;
    position: absolute;
	top: 0px;
	right: 0px;
	max-height: 750px;
}

.avatar_3 {
	float: right;
    position: absolute;
	top: 0px;
	right: 0px;
	max-height: 700px;
}

.avatar_4 {
	float: right;
    position: absolute;
	top: 0px;
	right: 0px;
	max-height: 650px;
}

.avatar_5 {
	float: right;
    position: absolute;
	top: 0px;
	right: 0px;
	max-height: 600px;
}

.avatar_6 {
	float: right;
    position: absolute;
	top: 0px;
	right: 0px;
	max-height: 550px;
}

.avatar_mode_0 {
	float: right;
    position: absolute;
	top: 80px;
	right: 10px;
	opacity:0.7;
}

.avatar_mode_1 {
	float: right;
    position: absolute;
	top: 110px;
	right: 10px;
	opacity:0.7;
}

.avatar_mode_2 {
	float: right;
    position: absolute;
	top: 140px;
	right: 10px;
	opacity:0.7;
}

.avatar_switch {
	float: right;
    position: absolute;
	top: 0px;
	right: 10px;
	opacity:0.5;
}

.avatar_text_div_l {
	float: right;
    position: absolute;
	top: 10px;
	right: 30px;
}

.avatar_text_div_r {
	float: right;
    position: absolute;
	top: 10px;
	right: 10px;
}

.avatar_text_size_d {
	float: right;
    position: absolute;
	top: 50px;
	right: 10px;
}

.avatar_text_size_u {
	float: right;
    position: absolute;
	top: 30px;
	right: 10px;
}

.call {
	float: left;
	border: 1px Solid grey;
	width: 300px;
	padding: 5px;
}

.centerAlign {
	display: inline-block;
	/*padding: 0px;*/
	width: 100%;
	text-align: center;
	margin-right: 0;
}

#clothes td {
	padding-left: 10px;
}

#clothes th, #clothes td {
	text-align: center;
}

.clothing_image_0 {
	max-width: 200px;
	max-height: 200px;
	padding-right: 5px;
	padding-bottom: 5px;
}

.clothing_image_1 {
	max-width: 175px;
	max-height: 175px;
	padding-right: 5px;
	padding-bottom: 5px;
}

.clothing_image_2 {
	max-width: 150px;
	max-height: 150px;
	padding-right: 5px;
	padding-bottom: 5px;
}

.clothing_image_3 {
	max-width: 125px;
	max-height: 125px;
	padding-right: 5px;
	padding-bottom: 5px;
}

.clothing_image_4 {
	max-width: 100px;
	max-height: 100px;
	padding-right: 5px;
	padding-bottom: 5px;
}

.clothing_image_5 {
	max-width: 80px;
	max-height: 80px;
	padding-right: 5px;
	padding-bottom: 5px;
}

.clothing_image_6 {
	max-width: 60px;
	max-height: 60px;
	padding-right: 5px;
	padding-bottom: 5px;
}

.clothing_image_sidebar_0 {
	border: 1px Solid #404040;
	width: 44%;
	max-height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_1 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_2 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_3 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_4 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_5 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_6 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_7 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_8 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_9 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_10 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_11 {
	border: 1px Solid #404040;
	width: 44%;
	height: 44%;
}

.clothing_image_small_sidebar_11 {
	border: 1px Solid #404040;
	width: 20%;
	height: 20%;
}

.clothing_image_small_sidebar_top_11 {
	border: 1px Solid #404040;
	width: 20%;
	height: 20%;
	margin-bottom: 24%;
	margin-right: -23%;
}

.clothing_image_small_sidebar_top_1 {
	border: 1px Solid #404040;
	width: 20%;
	height: 20%;
	transition: transform 0.4s 0.3s;
	margin-bottom: 24%;
	margin-right: -23%;
}

.clothing_image_small_sidebar_top_3 {
	border: 1px Solid #404040;
	width: 20%;
	height: 20%;
	transition: transform 0.4s 0.3s;
	margin-bottom: 24%;
	margin-right: -23%;
}

.clothing_image_small_sidebar_2 {
	border: 1px Solid #404040;
	width: 20%;
	height: 20%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_small_sidebar_4 {
	border: 1px Solid #404040;
	width: 20%;
	height: 20%;
	transition: transform 0.4s 0.3s;
}

.clothing_image_sidebar_0:hover {
	transform: scale(2.0) translate(25%, 25%);
	z-index: 1;
}

.clothing_image_sidebar_1:hover {
	transform: scale(2.0) translate(-25%, 25%);
	z-index: 1;
}

.clothing_image_sidebar_2:hover {
	transform: scale(2.0) translate(-25%, 25%);
	z-index: 1;
}

.clothing_image_sidebar_3:hover {
	transform: scale(2.0) translate(-25%, 25%);
	z-index: 1;
}

.clothing_image_sidebar_4:hover {
	transform: scale(2.0) translate(-25%, 25%);
	z-index: 1;
}

.clothing_image_sidebar_5:hover {
	transform: scale(2.0) translate(25%, 0%);
	z-index: 1;
}

.clothing_image_sidebar_6:hover {
	transform: scale(2.0) translate(-25%, 0%);
	z-index: 1;
}

.clothing_image_sidebar_7:hover {
	transform: scale(2.0) translate(25%, 0%);
	z-index: 1;
}

.clothing_image_sidebar_8:hover {
	transform: scale(2.0) translate(-25%, 0%);
	z-index: 1;
}

.clothing_image_sidebar_9:hover {
	transform: scale(2.0) translate(25%, -25%);
	z-index: 1;
}

.clothing_image_sidebar_10:hover {
	transform: scale(2.0) translate(-25%, -25%);
	z-index: 1;
}

.clothing_image_small_sidebar_top_1:hover {
	transform: scale(4.0) translate(-12.5%, 37.5%);
	z-index: 1;
}

.clothing_image_small_sidebar_2:hover {
	transform: scale(4.0) translate(-12.5%, 37.5%);
	z-index: 1;
}

.clothing_image_small_sidebar_top_3:hover {
	transform: scale(4.0) translate(-37.5%, 37.5%);
	z-index: 1;
}

.clothing_image_small_sidebar_4:hover {
	transform: scale(4.0) translate(-37.5%, 37.5%);
	z-index: 1;
}

#clothing_images {
	float: right;
	width: 310px;
}

.delayed_link {
	animation-duration: 5s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.delayed_text_fast {
	animation-duration: 5s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.delayed_text_long {
	animation-duration: 15s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.delayed_text_med {
	animation-duration: 10s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.divider0 {
	float: right;
    position: relative;
	top: 0px;
	right: 0px;
}

.divider1 {
	float: right;
    position: relative;
	top: 0px;
	right: 0px;
	max-height: 800px;
}

.divider2 {
	float: right;
    position: relative;
	top: 0px;
	right: 0px;
	max-height: 750px;
}

.divider3 {
	float: right;
    position: relative;
	top: 0px;
	right: 0px;
	max-height: 700px;
}

.divider4 {
	float: right;
    position: relative;
	top: 0px;
	right: 0px;
	max-height: 650px;
}

.divider5 {
	float: right;
    position: relative;
	top: 0px;
	right: 0px;
	max-height: 600px;
}

.divider6 {
	float: right;
    position: relative;
	top: 0px;
	right: 0px;
	max-height: 550px;
}

.email_image {
	float: right;
	max-width: 200px;
    border: 1px solid white;
    padding: 0px 5px 0px 5px;
}

.email_read {
	opacity:0.5;
}

.email_unread {
	font-weight: bold;
}

.faded {
	opacity: 0.7;
}

.fading_text_fast {
	opacity:0;
	animation-duration: 5s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac2;
}

.fading_text_long {
	opacity:0;
	animation-duration: 15s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac2;
}

.fading_text_med {
	opacity:0;
	animation-duration: 10s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac2;
}

.frame50 {
	text-align: center;
	border: 1px Solid grey;
	background-color: #111111;
	width: 47%;
	display: inline-block;
	border-radius: 9px;
	padding: 4px 7px 4px 7px;
	margin-bottom: 7px;
}

.frame80 {
	text-align: center;
	border: 1px Solid grey;
	background-color: #111111;
	max-width: 80%;
	display: inline-block;
	border-radius: 9px;
	padding: 4px 7px 4px 7px;
	margin-bottom: 7px;
}

.frame100 {
	text-align: center;
	border: 1px Solid grey;
	background-color: #111111;
	width: 97%;
	display: inline-block;
	border-radius: 9px;
	padding: 4px 7px 4px 7px;
	margin-bottom: 7px;
}

.exportLink {
	text-align: center;
	display: inline-block;
	color: white;
	width: 60%;
	overflow: hidden;
	margin-bottom: -2px;
}

.general_image, .chores_image, .games_image, .items_image {
	float: right;
	max-width: 400px;
	padding-left: 10px;
	padding-bottom: 10px;
}

.mall_image {
	float: right;
	max-width: 40%;
	max-height: 300px;
	padding-left: 10px;
	padding-bottom: 10px;
}

.small_image {
	float: right;
	max-width: 30%;
	max-height: 200px;
	padding-left: 10px;
	padding-bottom: 10px;
}

.general_video {
	float: right;
	max-width: 400px;
	padding-left: 10px;
	padding-bottom: 10px;
}

.glitch {
  color: white;
  font-size: 16px;
  position: relative;
  width: 400px;
  margin: 0 auto;
}

.glitch2 {
  color: white;
  font-size: 16px;
  position: relative;
  width: 400px;
  margin: 0 auto;
}

.glitch:after {
  content: attr(data-text);
  position: absolute;
  left: 2px;
  text-shadow: -1px 0 red;
  top: 0;
  color: white;
  background: black;
  overflow: hidden;
  clip: rect(0, 900px, 0, 0);
  animation: noise-anim 5s infinite linear alternate-reverse;
}

.glitch:before {
  content: attr(data-text);
  position: absolute;
  left: -2px;
  text-shadow: 1px 0 blue;
  top: 0;
  color: white;
  background: black;
  overflow: hidden;
  clip: rect(0, 900px, 0, 0);
  animation: noise-anim-2 4s infinite linear alternate-reverse;
}

.glitch2:after {
  content: attr(data-text);
  position: absolute;
  left: 2px;
  text-shadow: -1px 0 pink;
  top: 0;
  color: white;
  background: black;
  overflow: hidden;
  clip: rect(0, 900px, 0, 0);
  animation: noise-anim 5s infinite linear alternate-reverse;
}


.glitch2:before {
  content: attr(data-text);
  position: absolute;
  left: -2px;
  text-shadow: 1px 0 blue;
  top: 0;
  color: white;
  background: black;
  overflow: hidden;
  clip: rect(0, 900px, 0, 0);
  animation: noise-anim-2 2s infinite linear alternate-reverse;
}

.glitch3 {
  color: white;
  font-size: 16px;
  position: relative;
  margin: 0 auto;
}

.glitch3:after {
  content: attr(data-text);
  position: absolute;
  left: 2px;
  text-shadow: -1px 0 pink;
  top: 0;
  color: white;
  background: black;
  overflow: hidden;
  clip: rect(0, 900px, 0, 0);
  animation: noise-anim 5s infinite linear alternate-reverse;
}

.glitch3:before {
  content: attr(data-text);
  position: absolute;
  left: -2px;
  text-shadow: 1px 0 blue;
  top: 0;
  color: white;
  background: black;
  overflow: hidden;
  clip: rect(0, 900px, 0, 0);
  animation: noise-anim-2 2s infinite linear alternate-reverse;
}

.guardiandream {
	font-weight: bold;
}

.halftransparent {
	opacity: 0.5;
}

.transparent {
	opacity: 0;
}

.hidden {
	display: none;
}

#inventory {
	padding-left: 10px;
	text-align: left;
	padding-bottom: 5px;
}

.inv_action {
	font-size: 11pt;
}

.inv_action_select {
	font-weight: bold;
	font-size: 11pt;
}

.inv_action_faded {
	font-size: 11pt;
	opacity: 0.5;
}

.inv_item {
	font-size: 10pt;
}

.item_image, #inv_item {
	float: right;
	max-width: 300px;
    position: fixed;
	top: 30px;
	right: 30px;
}

#item_preview_bedroom {
	position: fixed;
	max-height: 300px;
	max-width: 300px;
}

#item_preview_mall {
	position: fixed;
	max-height: 300px;
	max-width: 300px;
	/*margin-right: 100%;*/
	/*border: 1px Solid #404040;*/
	/*margin-left: 40%;*/
	/*margin-left: 300px;*/
}

#item_preview {
	float: right;
	clear: right;
	max-height: 300px;
	max-width: 300px;
	margin-top: 10px;
	margin-left: -300px;
}

.item_preview_box {
	float: right;
	clear: right;
	height: 300px;
	width: 300px;
	text-align: left;
	/*margin-right: 300px;*/
	/*margin-left: 10px;*/
	/*content: "";*/
	/*padding: 10px;*/
	/*border: 1px Solid #404040;*/
	/*text-align: left;*/
	/*margin-left: 40%;*/
	/*margin-left: 300px;*/
}

@keyframes halfopac{
	from{opacity:0.6} to{opacity:1.0}
}

@keyframes noise-anim {
  0% {
    clip: rect(5px, 9999px, 4px, 0);
  }
  5% {
    clip: rect(1px, 9999px, 1px, 0);
  }
  10% {
    clip: rect(15px, 9999px, 3px, 0);
  }
  15% {
    clip: rect(10px, 9999px, 7px, 0);
  }
  20% {
    clip: rect(12px, 9999px, 6px, 0);
  }
  25% {
    clip: rect(6px, 9999px, 5px, 0);
  }
  30% {
    clip: rect(6px, 9999px, 12px, 0);
  }
  35% {
    clip: rect(7px, 9999px, 2px, 0);
  }
  40% {
    clip: rect(7px, 9999px, 5px, 0);
  }
  45% {
    clip: rect(9px, 9999px, 3px, 0);
  }
  50% {
    clip: rect(7px, 9999px, 11px, 0);
  }
  55% {
    clip: rect(4px, 9999px, 15px, 0);
  }
  60% {
    clip: rect(3px, 9999px, 8px, 0);
  }
  65% {
    clip: rect(10px, 9999px, 9px, 0);
  }
  70% {
    clip: rect(9px, 9999px, 13px, 0);
  }
  75% {
    clip: rect(12px, 9999px, 12px, 0);
  }
  80% {
    clip: rect(5px, 9999px, 8px, 0);
  }
  85% {
    clip: rect(9px, 9999px, 8px, 0);
  }
  90% {
    clip: rect(5px, 9999px, 8px, 0);
  }
  95% {
    clip: rect(1px, 9999px, 16px, 0);
  }
  100% {
    clip: rect(8px, 9999px, 14px, 0);
  }
}

@keyframes noise-anim-2 {
  0% {
    clip: rect(11px, 9999px, 7px, 0);
  }
  5% {
    clip: rect(6px, 9999px, 11px, 0);
  }
  10% {
    clip: rect(10px, 9999px, 6px, 0);
  }
  15% {
    clip: rect(10px, 9999px, 8px, 0);
  }
  20% {
    clip: rect(3px, 9999px, 6px, 0);
  }
  25% {
    clip: rect(1px, 9999px, 8px, 0);
  }
  30% {
    clip: rect(15px, 9999px, 4px, 0);
  }
  35% {
    clip: rect(4px, 9999px, 7px, 0);
  }
  40% {
    clip: rect(8px, 9999px, 6px, 0);
  }
  45% {
    clip: rect(9px, 9999px, 1px, 0);
  }
  50% {
    clip: rect(9px, 9999px, 4px, 0);
  }
  55% {
    clip: rect(7px, 9999px, 14px, 0);
  }
  60% {
    clip: rect(12px, 9999px, 8px, 0);
  }
  65% {
    clip: rect(14px, 9999px, 7px, 0);
  }
  70% {
    clip: rect(1px, 9999px, 4px, 0);
  }
  75% {
    clip: rect(6px, 9999px, 15px, 0);
  }
  80% {
    clip: rect(8px, 9999px, 9px, 0);
  }
  85% {
    clip: rect(6px, 9999px, 13px, 0);
  }
  90% {
    clip: rect(11px, 9999px, 3px, 0);
  }
  95% {
    clip: rect(2px, 9999px, 6px, 0);
  }
  100% {
    clip: rect(14px, 9999px, 4px, 0);
  }
}

@keyframes opac{
	from{opacity:0} to{opacity:1.0}
}

@keyframes opac2{
	from{opacity:1.0} to{opacity:0}
}

.NPCcall {
	float: left;
	font-weight: bold;
	color: pink;
	width: 300px;
	text-align: right;
}

.NPCcall2 {
	float: left;
	font-weight: bold;
	color: pink;
	width: 300px;
	text-align: right;
	opacity: 0;
	animation-duration: 0.3s;
	animation-timing-function: ease;
	animation-delay: 1s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}	

.PCcall {
	float: left;
	font-weight: bold;
	color: deepskyblue;
	width: 300px;
	text-align: left;
}

.porn_image {
	max-width: 400px;
	max-height: 400px;
	padding-left: 20px;
	padding-bottom: 20px;
	float: right;
}

.porn_video {
	float: right;
	max-width: 400px;
	padding-left: 10px;
	padding-bottom: 10px;
}

.redOutline {
    border: 1px solid red;
}

.room_image_0 {
	float: right;
    position: absolute;
	max-width: 500px;
}

.room_image_1 {
	float: right;
    position: absolute;
	max-width: 450px;
}

.room_image_2 {
	float: right;
    position: absolute;
	max-width: 400px;
}

.room_image_3 {
	float: right;
    position: absolute;
	max-width: 350px;
}

.room_image_4 {
	float: right;
    position: absolute;
	max-width: 300px;
}

.room_image_5 {
	float: right;
    position: absolute;
	max-width: 250px;
}

.room_image_6 {
	float: right;
    position: absolute;
	max-width: 200px;
}

#room_images_0 {
	float: right;
	width: 500px;
	padding: 5px;
}

#room_images_1 {
	float: right;
	width: 450px;
	padding: 5px;
}

#room_images_2 {
	float: right;
	width: 400px;
	padding: 5px;
}

#room_images_3 {
	float: right;
	width: 350px;
	padding: 5px;
}

#room_images_4 {
	float: right;
	width: 300px;
	padding: 5px;
}

#room_images_5 {
	float: right;
	width: 250px;
	padding: 5px;
}

#room_images_6 {
	float: right;
	width: 200px;
	padding: 5px;
}

.room_image_0 {
	float: right;
    position: absolute;
	max-width: 500px;
}

.room_image_1 {
	float: right;
    position: absolute;
	max-width: 450px;
}

.room_image_2 {
	float: right;
    position: absolute;
	max-width: 400px;
}

.room_image_3 {
	float: right;
    position: absolute;
	max-width: 350px;
}

.room_image_4 {
	float: right;
    position: absolute;
	max-width: 300px;
}

.room_image_5 {
	float: right;
    position: absolute;
	max-width: 250px;
}

.room_image_6 {
	float: right;
    position: absolute;
	max-width: 200px;
}

.room_main_image_0 {
	float: right;
	max-width: 500px;
}

.room_main_image_1 {
	float: right;
	max-width: 450px;
}

.room_main_image_2 {
	float: right;
	max-width: 400px;
}

.room_main_image_3 {
	float: right;
	max-width: 350px;
}

.room_main_image_4 {
	float: right;
	max-width: 300px;
}

.room_main_image_5 {
	float: right;
	max-width: 250px;
}

.room_main_image_6 {
	float: right;
	max-width: 200px;
}

#sidebar_container {
	text-align: left;
}

.sign {
	font-weight: bold;
	color: grey;
	border: 1px Solid grey;
	width: 300px;
	text-align: center;
	padding: 5px;
}

#stats td {
	padding-left: 10px;
	margin-left: 10px;
	text-align: center;
}

#stats th {
	text-align: center;
	padding-left: 10px;
	margin-right: 10px;
	margin-left: 10px;
}

#sidebar_control {
	display: inline-block;
	text-align: center;
}

#sidebar_control td {
	padding-left: 5px;
	padding-right: 5px;
}

#sidebar_control th {
	padding-right: 5px;
}

.sidebar_tab_active {
	background-color: #002255;
}

.sidebarImages {
	display: inline-block;
	padding: 8px 2px 2px 2px;
	width: 97%;
}

.banner_image {
	width: 100%;
	max-height: 40px;
}

.sidebar_window {
	border: 1px Solid #404040;
	display: inline-block;
	width: 100%;
	height: 0;
	text-align: center;
	padding-bottom: 192%;
}

.sidebar_window_short {
	border: 1px Solid #404040;
	display: inline-block;
	width: 100%;
	height: 0;
	text-align: center;
	padding-bottom: 145%;
}


.sidebar_windowAvatar {
	border: 1px Solid #404040;
	display: inline-block;
	background-color: black;
	width: 100%;
	height: 0;
	padding-bottom: 210%;
	text-align: center;
}

.sideframe_bodyimage_empty{
	position: absolute;
	top:0px;
	left:0px;
	width:334px; /*width of your image*/
	height:880px; /*height of your image*/
	margin:0; /* If you want no margin */
	padding:0; /*if your want to padding */
}

.sideframe_showclothes{
	position: relative;
	width: 100%; /*width of your image*/
	height: 400px; /*height of your image*/
	transform: scale(-0.56, 0.56) translate(-30%, -43%);
	margin: 0; /* If you want no margin */
	padding: 0; /*if your want to padding */
}

table.email th {
    width: 100px;
}

table.email tr {
    border: 1px solid white;
    padding: 0px 5px 0px 5px;
}

table.inbox {
    border: 1px solid white;
}

table.inbox tr th:nth-child(0n+1) {
	min-width: 100px;
}

table.inbox tr th:nth-child(0n+2) {
	min-width: 200px;
}

table.inbox tr th:nth-child(0n+3), table.inbox tr td:nth-child(0n+3) {
    display:none;
//    min-width: 100px;
//    text-align: right;
}

table.inbox tr td:nth-child(0n+4), table.inbox tr td:nth-child(0n+4) {
	min-width: 80px;
	text-align: center;
	border-left: 1px solid white;
}

table.inventory {
	padding-bottom: 5px;
}

table.kinks {
	float: center;
	text-align: center;
}

table.kinks tr {
	float: center;
	text-align: center;
}

table.kinks td {
	float: center;
	text-align: center;
}

table.stats {
	padding-bottom: 5px;
}

.toggleCheckbox {
	border: 1px Solid grey;
	background-color: #111111;
	width: 90%;
	display: inline-block;
	border-radius: 9px;
	padding: 4px 7px 4px 7px;
	margin-bottom: 7px;
	font-size: 90%;
	float: center;
	text-align: center;
}

.toggleCheckboxInactive {
	border: 1px Solid grey;
	background-color: #111111;
	border-radius: 9px;
	padding: 4px 7px 4px 7px;
	font-size: 90%;
	opacity:0.5;
}

.tooltip {
	position: relative;
	display: inline-block;
}

.tooltip .tooltiptext {
	border: 2px Solid white;
	background-color: #1B1B1B;
	width: 300px;
	visibility: hidden;
	color: #fff;
	text-align: center;
	padding: 4px;
	margin-bottom: -100%;
	margin-left: -90%;
	border-radius: 7px;
	position: absolute;
	top: 35px;
	z-index: 1;
}

.tooltip .tooltiptext2 {
	border: 2px Solid white;
	background-color: #1B1B1B;
	width: 300px;
	visibility: hidden;
	color: #fff;
	text-align: center;
	padding: 2px;
	margin-bottom: -100%;
	margin-left: -300px;
	border-radius: 7px;
	position: absolute;
	top: 30px;
	z-index: 1;
}

.tooltip .tooltiptext3 {
	border: 2px Solid white;
	background-color: #1B1B1B;
	width: 300px;
	visibility: hidden;
	color: #fff;
	text-align: center;
	padding: 2px;
	margin-top: 0%;
	margin-left: -90%;
	border-radius: 7px;
	bottom: 30px;
	position: absolute;
	z-index: 1;
}

.tooltip .tooltiptext4 {
	border: 2px Solid white;
	background-color: #1B1B1B;
	width: 300px;
	visibility: hidden;
	color: #fff;
	text-align: center;
	padding: 2px;
	margin-top: 0%;
	margin-left: -300px;
	border-radius: 7px;
	bottom: 30px;
	position: absolute;
	z-index: 1;
}

.tooltip .tooltiptextWide {
	border: 2px Solid white;
	background-color: #1B1B1B;
	width: 600px;
	visibility: hidden;
	color: #fff;
	text-align: center;
	padding: 4px;
	margin-bottom: -100%;
	margin-left: -100px;
	border-radius: 7px;
	position: absolute;
	top: 35px;
	z-index: 1;
}

.tooltip .tooltiptextSmall {
	border: 2px Solid white;
	background-color: #1B1B1B;
	width: 100px;
	visibility: hidden;
	color: #fff;
	text-align: center;
	padding: 4px;
	margin-top: 100%;
	margin-left: -50px;
	border-radius: 7px;
	position: absolute;
	bottom: 30px;
	z-index: 1;
}

.tooltip:hover .tooltiptext {
	visibility: visible;
	transition-delay: 0.5s;
	animation-duration: 1s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.tooltip:hover .tooltiptext2 {
	visibility: visible;
	transition-delay: 0.5s;
	animation-duration: 1s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.tooltip:hover .tooltiptext3 {
	visibility: visible;
	transition-delay: 0.5s;
	animation-duration: 1s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.tooltip:hover .tooltiptext4 {
	visibility: visible;
	transition-delay: 0.5s;
	animation-duration: 1s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.tooltip:hover .tooltiptextWide {
	visibility: visible;
	transition-delay: 0.5s;
	animation-duration: 1s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

.tooltip:hover .tooltiptextSmall {
	visibility: visible;
	transition-delay: 0.5s;
	animation-duration: 1s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-iteration-count: 1;
	animation-play-state: running;
	animation-name: opac;
}

tr.header {
	border: 1px solid white;
	font-weight: bold;
	background-color: #303030;
}

.underlined {
	line-height: 200%;
}

.settings_menu {
	font-size: 90%;
	color: white;
	box-sizing:border-box;
	width: 50%;
	margin-top: -1px;
	margin-bottom: -100%;
	float: left;
	border-top:none;
}

.settings_menu a {
	color: white;
}
	
#menu li {
	box-sizing:border-box;
}
#menu li#menu-item-settings {
	width: 50%;
	float: left;
	border-right: 1px solid #444;
	border-top:none;
}
#menu li#menu-item-saves {
	width: 50%;
	float: right;
	border-left: 1px solid #444;
}
#menu li#menu-item-restart {
	clear:both;
}
#menu li a {
	text-transform:none;
	font-size:14px;
}
/*</structural and formatting>*/

/*<sidebar>*/
button {
	/*cursor: pointer;*/
	/*color: #ffffff;*/
	/*background-color: #09bcba;*/
	/*border: 3px solid #57c;*/
	/*line-height: normal;*/
	/*padding: 0.4em;*/
	/*transition-duration: 200ms;*/
	/*user-select: none;*/
	/*border-radius: 7px;*/
}
.redb button {
  /*background-color:red;*/
}
/*</sidebar>*/


:: Story JavaScript [script]
// Begin Inventory Macros
// Original macros by F2Andy: http://strugglingwithtwine.blogspot.ca/2014/03/handling-inventory.html
//
// Instructions:
//
// 1. In a passage, check if there's an item in the inventory...
// ...if not, give the user the option to link to a passage that adds it to inventory:
// <<if $inventory.indexOf("An Unsigned Note") == -1>>There is a note here. [[Pick up the note.]]<<endif>>
//
// 2. In a passage, check if there's an item in the inventory..
// ...if so, give the user a choice to progress to a new passage:
// <<if $inventory.indexOf("The Golden Key") == -1>>[[Unlock the door.]]<<endif>>
//
// 3. To add an "Inventory" link in your sidebar menu, create a passage named "StoryMenu".
// In it, create a link to your inventory's passage: [[Inventory]] or [[Backpack]], for example.
// Create a passage named "Inventory", and in it, write something like the following:
// <<if $inventory.length == 0>>You are not carrying anything.<<else>>You are carrying:
// <<invWithLinks>> <<endif>>
// <<back>>

// A helper function for the following macros.
window.getInv = function() {
  return state.active.variables.inventory;
}

// Starts your inventory. You need to call this once at the start of your game in order to make the inventory work.
// Usage: Place <<initInv>> in your StoryInit passage. Don't have a StoryInit passage? Make one.
macros.initInv = {
  handler: function(place, macroName, params, parser) {
    state.active.variables.inventory = [];
  }
};

// Add an item to your inventory:
// Usage: <<addToInv rock>> or <<addToInv "a smooth rock">>
macros.addToInv = {
  handler: function(place, macroName, params, parser) {
    if (params.length == 0) {
      throwError(place, "<<" + macroName + ">>: no parameters given");
      return;
    }
	var w=getItemObject(params[0]);
	var type=params[1];
	if (!w) {
		throwError(place, "<<" + macroName + ">>: invalid item '" + params[0] + "'");
		return;
	}
	if (w.maxAlt) {
		if (!type) {
			type=0;
		}
		if ((w.curAlt==0) && (w.ownAlt.length==0)) {
			w.curAlt=type;
		}
		w.ownAlt[type]=true;
	}
    if (state.active.variables.inventory.indexOf(w.name) == -1) {
		state.active.variables.inventory.push(w.name);
		state.active.variables.inventory=state.active.variables.inventory.sort();
    }
	macros.getInventoryList.handler(document.getElementById('inventory'));
  }
};

// Removes an item from your inventory
// Usage: <<removeFromInv rock>> or <<removeFromInv "a smooth rock">>
macros.removeFromInv = {
  handler: function(place, macroName, params, parser) {
    if (params.length == 0) {
      throwError(place, "<<" + macroName + ">>: no parameters given");
      return;
    }
    var index = state.active.variables.inventory.indexOf(params[0]);
    if (index != -1) {
      state.active.variables.inventory.splice(index, 1);
    }
  }
};

// Display the inventory as a list: Rock, Paper, Scissors
// This can go in any passage, but the best spot would be your [[Inventory]] passage.
// Usage: <<inv>>
macros.inv = {
  handler: function(place, macroName, params, parser) {
    if (state.active.variables.inventory.length == 0) {
      new Wikifier(place, 'nothing');
    } else {
      new Wikifier(place, state.active.variables.inventory.join(','));
    }
  }
};

// Display the inventory as a series of links to passages with the same names.
// This can go in any passage, but the best spot would be your [[Inventory]] passage.
// Usage: <<invWithLinks>>
// If those passages don't exist, the links will be broken.
// There is a line break after every item in the inventory.
macros.invWithLinks = { 
  handler: function(place, macroName, params, parser) {
    if (state.active.variables.inventory.length == 0) {
      new Wikifier(place, 'nothing');
    } else {
      new Wikifier(place, '[[' + state.active.variables.inventory.join(']]<br>[[') + ']]');
    }
  }
};

macros.getInventoryList = {
	getAction: function(itemObject) {
		var vars=state.active.variables;
		var items=vars.items;
//		if ((itemObject==items.diary) && (state.passage=='Go to bedroom')) {
//			return "-  [[Write down your story|Export screen]]";
//		}
		return "";
	},
  handler: function(place, macroName, params, parser) {
//		new Wikifier(place, 'Aside from your clothing, ');
		var inv=state.active.variables.inventory;
		var f=false;
		var td='';
		for (var i=0; i<inv.length; i++) {
			var o=getItemObject(inv[i]);
			if (o && o.clothingType == 0 && o.surgery == false && o.store != 1) {
				if (!f) {
					f=true;
//					new Wikifier(place, 'you currently have these items:<br><br><img id="inv_item" class="hidden">');
				}
				td+=inv[i];
				td+='<br>';
			}
		}
		if (!f) {
			td+="You don't have any items.";
		}
		new Wikifier(place, td);
	}
};

// Empty the inventory entirely.
// Note: This is not like "dropping" an object; they are not added to the current room/passage. It just erases them all entirely.
// Usage: <<emptyInv>>
macros.emptyInv = { 
  handler: function(place, macroName, params, parser) {
    state.active.variables.inventory = []
  }
};
// End Inventory Macros

macros ['glitchText'] = {
		handler:function(place, macroName, params){
			var text = params[0].split(" ");
			var str = "";
			for(var i=0;i<text.length;i++){
				var glitch;
				
				switch(Math.floor(Math.random()*3)){
				case 0: 
					glitch="glitch";
					break;
				case 1: 
					glitch="glitch2";
					break;
				case 2: 
					glitch="glitch3";
					break;
				default:
					glitch="glitch";
					break;
				}
				
				
				
			
				str+='<span class="'+glitch+'" data-text="'+text[i]+'">'+text[i]+'</span> '; 
			}
			console.log(str);
			new Wikifier(place, str);	
			
		}
}

macros.wearClothing = {
  handler: function(place, macroName, params, parser) {
		var w=getItemObject(params[0]);
		if (!w) {
			throwError(place, "<<" + macroName + ">>: invalid clothing '" + params[0] + "'");
			return;
		}
		var ca=state.active.variables.player.clothes;
		for (var i=ca.length-1; i>=0; i--) {		
			var pc=getItemObject(ca[i]);
			if (((pc.clothingType + pc.cantWearWith) & (w.clothingType + w.cantWearWith)) > 0) {
				state.active.variables.player.clothes.splice(i, 1);
			}
		}
		state.active.variables.player.clothes.push(w.name);
		state.active.variables.player.clothes=state.active.variables.player.clothes.sort();
	}
};

macros.buyItem = {
  handler: function(place, macroName, params, parser) {
		var w=getItemObject(params[0]);
		if (!w) {
			throwError(place, "<<" + macroName + ">>: invalid item '" + params[0] + "'");
			return;
		}
		if (state.active.variables.inventory.indexOf(w.name) == -1) {
			state.active.variables.inventory.push(w.name);
			state.active.variables.inventory=state.active.variables.inventory.sort();
		}
		if (w.maxAlt) {
			if (state.active.variables.showimages) {
				if ((w.curAlt==0) && (w.ownAlt.length==0)) {
					w.curAlt=w.storeCur;
				}
				w.ownAlt[w.storeCur]=true;
				state.active.variables.player.money-=Math.floor((w.storeCur%10)*w.cost*0.02);
			}
			if (!state.active.variables.showimages) {
				w.ownAlt[0]=true;
			}
		}
		state.active.variables.player.money-=w.cost;
	}
};

function getItemObject(name) {
	var ca=state.active.variables.items;
  for (var i=0; i<Object.keys(ca).length; i++) {
    if (ca[Object.keys(ca)[i]].name==name) {
      return ca[Object.keys(ca)[i]];
    }
  }
  return false;
}

macros.notDressed = {
  handler: function(place, macroName, params, parser) {
		var id=params[0].replace(/[ ,']/g, '_');
		var r=params[1] ? params[1] : "You're not dressed appropriately";
		var ex=params[2] ? params[2] : '';
		new Wikifier(place, '<<click "' + params[0] + '">><<replace "#' + id + '">> @@.deny;' + r + '@@<</replace>><</click>> ' + ex + '<span id="' + id + '"></span>');
	}
};

macros.showClothingImage = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.clothingSelectorRender) {
			state.active.variables.clothingSelectorRender=false;
			state.active.variables.worn=[];
			state.active.variables.type=[];
			if (state.active.variables.showimages) {
				setTimeout(function() {
					var cis=document.getElementById('clothing_images');
					var wa=state.active.variables.worn;
					var wt=state.active.variables.type;
					var si=state.active.variables.itemsSize;
					for (var i=0;i<wa.length; i++) {
						if (wt[i]==100) {
							cis.innerHTML+='<img src="images/items/' + wa[i] + '" class="clothing_image_' + si + '">';
							continue;
						}
						if (wt[i]>9) {
							cis.innerHTML+='<img src="images/items/' + wa[i] + wt[i] + '.jpg" class="clothing_image_' + si +'">';
							continue;
						}
						if (wt[i]<10) {
							cis.innerHTML+='<img src="images/items/' + wa[i] + '0' + wt[i] + '.jpg" class="clothing_image_' + si +'">';
							continue;
						}
					}
				}, 1);
			}
		}
		state.active.variables.worn.push(params[0]);
		state.active.variables.type.push(params[1]);
	}
};

macros.showClothingImageSidebar = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.clothingSelectorRender) {
			state.active.variables.clothingSelectorRender=false;
			state.active.variables.worn=[];
			state.active.variables.type=[];
			if (state.active.variables.showimages) {
				setTimeout(function() {
					var cis=document.getElementById('clothing_images_sidebar');
					var wa=state.active.variables.worn;
					var wt=state.active.variables.type;
					for (var i=0;i<wa.length; i++) {
						if (wt[i]==100) {
							cis.innerHTML+='<img src="images/items/' + wa[i] + '" class="clothing_image_sidebar">';
							continue;
						}
						if (wt[i]>9) {
							cis.innerHTML+='<img src="images/items/' + wa[i] + wt[i] + '.jpg" class="clothing_image_sidebar">';
							continue;
						}
						if (wt[i]<10) {
							cis.innerHTML+='<img src="images/items/' + wa[i] + '0' + wt[i] + '.jpg" class="clothing_image_sidebar">';
							continue;
						}
					}
				}, 1);
			}
		}
		state.active.variables.worn.push(params[0]);
		state.active.variables.type.push(params[1]);
	}
};

macros.showImageSidebar = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.showimages) {
			var cl="clothing_image_sidebar_";
			if (params[2]) {
				if (params[2]==1) { cl="clothing_image_small_sidebar_" }
				if (params[2]==2) { cl="clothing_image_small_sidebar_top_" }
			}
			if (params[1]==100) {
				new Wikifier(place, '<img src="images/items/' + params[0] +'" class="'+ cl + params[3] +'">');
			} else {
				if (params[1]>9) {
					new Wikifier(place, '<img src="images/items/' + params[0] + params[1] +'.jpg" class="'+ cl + params[3] + '">');
				} else {
					new Wikifier(place, '<img src="images/items/' + params[0] + '0' + params[1] +'.jpg" class="'+ cl + params[3] +'">');
				}
			}
		}
	}
};

macros.showRoomImage = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.bedroomRender) {
			state.active.variables.bedroomRender=false;
			state.active.variables.roomIm=[];
			var si=state.active.variables.roomSize;
			if (state.active.variables.showimages) {
				setTimeout(function() {
					if (si==0) { var cis=document.getElementById('room_images_0'); }
					if (si==1) { var cis=document.getElementById('room_images_1'); }
					if (si==2) { var cis=document.getElementById('room_images_2'); }
					if (si==3) { var cis=document.getElementById('room_images_3'); }
					if (si==4) { var cis=document.getElementById('room_images_4'); }
					if (si==5) { var cis=document.getElementById('room_images_5'); }
					if (si==6) { var cis=document.getElementById('room_images_6'); }
					var ri=state.active.variables.roomIm;
						for (var i=0;i<ri.length; i++) {
							if (i==0) {
								cis.innerHTML+='<img src="images/room/' + ri[i] + '" class="room_main_image_' + si + '">';
								continue;
							}
							cis.innerHTML+='<img src="images/room/' + ri[i] + '" class="room_image_' + si + '">';
							continue;
						}
				}, 1);
			}
		}
		state.active.variables.roomIm.push(params[0]);
	}
};

macros.removeClothing = {
  handler: function(place, macroName, params, parser) {
		var w=getItemObject(params[0]);
		if (!w) {
			throwError(place, "<<" + macroName + ">>: invalid item '" + params[0] + "'");
			return;
		}
		var i=state.active.variables.player.clothes.indexOf(w.name);
		if (i >= 0) {
			state.active.variables.player.clothes.splice(i, 1);
		}
	}
};

macros.removeClothingType = {
  handler: function(place, macroName, params, parser) {
		if (!params[0]) {
			throwError(place, "<<" + macroName + ">>: invalid item type '" + params[0] + "'");
			return;
		}
		var ca=state.active.variables.player.clothes;
		for (var i=ca.length-1; i>=0; i--) {
			var pc=getItemObject(ca[i]);
			if ((pc.clothingType & params[0]) > 0) {
				state.active.variables.player.clothes.splice(i, 1);
			}
		}
	}
};

macros.nextClothing = {
  handler: function(place, macroName, params, parser) {
		var w=getItemObject(params[0]);
		if (!w) {
			throwError(place, "<<" + macroName + ">>: invalid item '" + params[0] + "'");
			return;
		}
		for (var i=0; i<=w.ownAlt.length; i++) {
			w.curAlt++;
			if (w.curAlt > w.ownAlt.length) {
				w.curAlt=0;
			}
			if (w.ownAlt[w.curAlt]) {
				return;
			}
		}
		return;
	}
};

macros.previousClothing = {
  handler: function(place, macroName, params, parser) {
		var w=getItemObject(params[0]);
		if (!w) {
			throwError(place, "<<" + macroName + ">>: invalid item '" + params[0] + "'");
			return;
		}
		for (var i=0; i<=w.ownAlt.length; i++) {
			w.curAlt--;
			if (w.curAlt < 0) {
				w.curAlt=w.ownAlt.length;
			}
			if (w.ownAlt[w.curAlt]) {
				return;
			}
		}
		return;
	}
};

macros.nextStoreClothing = {
  handler: function(place, macroName, params, parser) {
		var w=getItemObject(params[0]);
		if (!w) {
			throwError(place, "<<" + macroName + ">>: invalid item '" + params[0] + "'");
			return;
		}
		var start=w.storeCur;
		var cur=w.storeCur;
		for (var i=0; i<=w.maxAlt+1; i++) {
			cur++;
			if (cur > w.maxAlt) {
				cur=0;
			}
			if (w.storeAlt[cur] && w.ownAlt[cur]) {
				w.storeAlt[cur]=false;
			}
			if (w.storeAlt[cur]) {
				w.storeCur=cur;
				return;
			}
		}
		w.storeCur=start;
		w.storeAlt=[];
		return;
	}
};

macros.previousStoreClothing = {
  handler: function(place, macroName, params, parser) {
		var w=getItemObject(params[0]);
		if (!w) {
			throwError(place, "<<" + macroName + ">>: invalid item '" + params[0] + "'");
			return;
		}
		var start=w.storeCur;
		var cur=w.storeCur;
		for (var i=0; i<=w.maxAlt+1; i++) {
			cur--;
			if (cur < 0) {
				cur=w.maxAlt;
			}
			if (w.storeAlt[cur] && w.ownAlt[cur]) {
				w.storeAlt[cur]=false;
			}
			if (w.storeAlt[cur]) {
				w.storeCur=cur;
				return;
			}
		}
		w.storeCur=start;
		w.storeAlt=[];
		return;
	}
};


macros.showAvatarImage = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.avatarRender) {
			state.active.variables.avatarRender=false;
			state.active.variables.avatarImageName=[];
			var str = "";
			if (state.active.variables.showimages) {
				setTimeout(function() {
					var strIn = state.active.variables.avatarImageName;
					
					str+='<div id="showBody" class="sideframe_bodyimage_empty" style="background-image: url(./images/avatar/torso.png)"></div>';
					
					for (var i=0;i<strIn.length; i++) {
						str+='<div id="showBody" class="sideframe_bodyimage_empty" style="background-image: url(./images/avatar/'+strIn[i]+')"></div>';
					}
					
					$('#showClothes').empty();
					$('#showClothes').append(str);
					console.log("createAvatar:"+str);
				}, 1);
			}
		}
		state.active.variables.avatarImageName.push(params[0]);
	}
};

macros.showImage = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.showimages) {
			if (params[2]) {
				setTimeout(function() {
					var i=document.getElementById(params[2]);
					i.setAttribute('src', 'images/' + params[0] + '/' + params[1]);
					i.className=params[0]+'_image';
				}, 1);
			} else {
				new Wikifier(place, '<img src="images/' + params[0] + '/' + params[1] + '" class="' + params[0] + '_image">');
			}
		}
	}
};

macros.showImageSpecial = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.showimages) {
			new Wikifier(place, '<img src="images/' + params[0] + '/' + params[1] + '" class="' + params[2] + '">');
		}
	}
};

macros.showBanner = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.showimages) {
			new Wikifier(place, '<img src="images/general/PE_Banner.png" class="banner_image">');
		}
	}
};

macros.showMultiImage = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.showimages) {
			if (params[2]) {
				new Wikifier(place, '<img src="images/' + params[2] + '/' + params[1] + '" class="' + params[0] + '">');
			} else {
				new Wikifier(place, '<img src="images/avatar/' + params[1] + '" class="' + params[0] + '">');
			}
		}
	}
};

macros.showVideo = {
  handler: function(place, macroName, params, parser) {
		if (state.active.variables.showimages) {
			if (params[2]) {
				setTimeout(function() {
					var i=document.getElementById(params[2]);
					i.setAttribute('src', 'images/' + params[0] + '/' + params[1]);
					i.className=params[0]+'_video';
					i.setAttribute('autoplay', true);
				}, 1);
			} else {
				new Wikifier(place, '<video src="images/' + params[0] + '/' + params[1] + '" class="' + params[0] + '_video" autoplay="true" loop="true"></video>');
			}
		}
	}
};

macros.delayedLink = {
  handler: function(place, macroName, params, parser) {
		var id=params[1].replace(/[ ,']/g, '_');
		new Wikifier(place, '<span id="'+id+'" class="hidden">[[' + params[1] + ']]</span>');
		setTimeout(function() {
				if (id) {
				var i=document.getElementById(id);
					if (i) {
					i.className='delayed_link';
					}
				}
			}, 
			parseInt(params[0]) * 1000
		);
	}
};

macros.toggleStats = {
  handler: function(place, macroName, params, parser) {
		var cn='hidden';
		var ct='Show';
		if (state.active.variables.showStats) {
			cn='';
			ct='Hide';
		}
		var oc='var ao=document.getElementById(\'toggle_stats\');var so=document.getElementById(\'stats\');var ns=!SugarCube.State.variables.showStats;SugarCube.State.variables.showStats=ns;ao.innerHTML=(ns ? \'Hide\' : \'Show\')+\' Stats\';so.className=(ns ? \'\' : \'hidden\');';
		new Wikifier(place, '<a id="toggle_stats" onclick="'+oc+'">'+ct+' Stats</a>');
	}
};

String.prototype.toProperCase = function () {
	return this.replace(/\w\S*/g, function(txt) {
		return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
		});
};

Config.history.controls = false;


Macro.add('selectScene', {
	tags	: ['scene', 'restIsRandom'],
	handler() {
		if (this.args.length != 2) {
			return this.error('takes two arguments, <id> and <strategy>');
		}
		var id = this.args[0], strategy = this.args[1];
		if (strategy != 'SEQ' && strategy != 'SEQ2RND' && strategy != 'RND' && strategy != 'RND2RND') {
			return this.error('strategy "' + strategy + '" is not correct');
		}
		if (this.payload.length < 2) {
			return this.error('requires at least one <<scene>>');
		}
		
		// How to handle export/import in Perverted Education?
		var topObj = State.active.variables.selectScene;
		
		// Arrow syntax only in ES2015 and newer
		// var rand = (limit) => Math.floor(Math.random() * limit);
		var rand = function (limit) {
			return Math.floor(Math.random() * limit);
		}

		if (! (id in topObj)) { // No state for this id, so create it
			var scenesObj = {
				strategy: strategy,	origStrat: strategy,
				payloadLength: this.payload.length,
				scenes: [], perm: [], restIsRnd: [],
				last: -1,
			};
			
			// Iterate over this.payload and store in scenesObj
			var restIsRnd = false;
			var pushTarget = 'scenes';
			for (var i = 1; i < this.payload.length; ++i) {
				var chance = 10;	// Default chance for <<scene>>
				if (this.payload[i].name == 'restIsRandom') {
					if (strategy != 'SEQ') {
						return this.error('<<restIsRandom>> can only be used with strategy SEQ');
					} else if (restIsRnd) {
						return this.error('<<restIsRandom>> can only be called once');
					} else if (i + 2 > this.payload.length) {
						return this.error('<<restIsRandom>> must have at least one <<scene>> after it');
					}
					restIsRnd = true;
					pushTarget = 'restIsRnd';
					continue;
				} else {		// must be <<scene>>
					if (this.payload[i].args.length > 1) {
						 return this.error('<<scene>> only takes one arg, chance');
					} else if (this.payload[i].args.length == 1) {
						if (strategy == 'SEQ' && !restIsRnd) {
							return this.error('<<scene>> with strategy SEQ can only thake chance arg after <<restIsRandom>>');
						}
						var arg0 = this.payload[i].args[0];
						if (!Number.isInteger(arg0)) {
							return this.error('chance must be an integer');
						} else if (arg0 < 0) {
							return this.error('chance can not be negative');
						}
						chance = arg0;
					}
				}
				scenesObj[pushTarget].push({scene: this.payload[i].contents,
														 				chance: chance});
				
				// Build permutation for SEQ,SEQ2RND, and RND2RND
				if ((strategy == 'SEQ2RND' || strategy == 'SEQ')
						&& !restIsRnd) {
					// 'Permutation' is in sequential order
					scenesObj.perm.unshift(i - 1);
				} else if (strategy == 'RND2RND') {
					var j = rand(scenesObj.perm.length + 1);
		   		scenesObj.perm.splice(j, 0, i - 1);
				}
			}
			// For strategy SEQ, if no <<restIsRandom>>, get 'stuck' on last scene
			if (strategy == 'SEQ' && scenesObj.restIsRnd.length == 0) {
				scenesObj.restIsRnd.push(scenesObj.scenes[scenesObj.scenes.length - 1]);
			}
			
			// Sanity check on chance, sums of chance for scenes and
			//  restIsRnd must not be zero
			var acc = function (acc, curr) { return acc + curr.chance; }
			if (strategy == 'SEQ' &&
					scenesObj.restIsRnd.reduce(acc, 0) == 0) {
				return this.error('not all chance can be zero');
			} else if (scenesObj.scenes.reduce(acc, 0) == 0) {
				return this.error('not all chance can be zero');
			}
			topObj[id] = scenesObj;		// Store state for id
		} // End of adding new selectScene
		
		// Find state for id
		var obj = topObj[id];
		
		// Sanity check on state versus data in <<selectScene>>
		if (obj.origStrat != strategy ||
				obj.payloadLength != this.payload.length) {
			return this.error('id "' + id + '" is not unique');
		}
		
		// Find scene depending on strategy
		var len = obj.scenes.length, index = 0;
		switch(obj.strategy) {
			case 'SEQ':				// 'Permutation' is actually in sequential order
			case 'SEQ2RND':		// 'Permutation' is actually in sequential order
			case 'RND2RND':
				if (obj.perm.length > 0) {
					index = obj.perm.pop();
					break;
				} else if (strategy == 'SEQ') {
					obj.strategy = 'RND';
					obj.scenes = obj.restIsRnd;
					len = obj.scenes.length;
					obj.last = -1;
				}
				// If no more permutations, fall through to RND
			case 'RND':
				// Sum up all chances (except for last scene selected)
				var chanceTot = 0;
				for (var i = 0; i < len; ++i) {
					if (len < 3 || i != obj.last) {
						chanceTot += obj.scenes[i].chance;
					}
				}
				// Find a random scene (except last scene selected)
				//  weighted by chance
				var chance = rand(chanceTot);
				//var chancesave = chance;
				for (var i = 0; i < len; ++i) {
					if (len < 3 || i != obj.last) {
						chance -= obj.scenes[i].chance;
						if (chance < 0) {
							index = i;
							break;
						}
					}
				}
				break;
			default:
				return this.error('strategy "' + obj.strategy + '" is not implemented');
		}
		obj.last = index;		// Store index to selected scene
		jQuery(this.output).wiki(obj.scenes[index].scene);
		//return this.error('len=' + len + ' ,chanceTot=' + chanceTot + ' ,chance=' + chancesave + ' ,index=' + index + ' ,last scene=' + obj.last);
	}
});

macros.openQuote = {
  handler: function(place, macroName, params, parser) {
		var td='"';
		if (state.active.variables.openQuote && (!state.active.variables.closeQuote)) {
		td='<br><br>"';
		}
		new Wikifier(place, td);
		state.active.variables.openQuote=true;
		state.active.variables.closeQuote=false;
	}
};

macros.closeQuote = {
  handler: function(place, macroName, params, parser) {
		var td='"';
		if (state.active.variables.openQuote) {
		td='"<br><br>';
		}
		if (state.active.variables.closeQuote) {
		td='';
		}
		new Wikifier(place, td);
		state.active.variables.closeQuote=true;
		state.active.variables.openQuote=false;
	}
};


